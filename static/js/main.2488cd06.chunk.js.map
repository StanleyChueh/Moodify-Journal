{"version":3,"sources":["AlertModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","moodLabels","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","reduce","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","isSpeechOpen","setIsSpeechOpen","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","drawingDataUrl","setDrawingDataUrl","recognitionRef","useRef","canvasRef","isDrawing","useEffect","currentMusic","moodRange","title","playlistUrl","find","music","handleInputModeChange","mode","clearResults","map","index","key","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","src","alt","handleEnter","image","moodValue","moodIndex","Math","floor","min","moodLabel","imageCount","random","getRandomImageForMood","drawing","speech","alert","label","type","max","Number","startSpeechRecognition","window","recognition","webkitSpeechRecognition","lang","interimResults","continuous","current","onresult","event","transcript","results","prevResult","onerror","console","error","start","stopSpeechRecognition","stop","ref","width","height","onMouseDown","canvas","ctx","getContext","rect","getBoundingClientRect","scaleX","scaleY","beginPath","moveTo","clientX","left","clientY","top","onMouseMove","lineTo","stroke","onMouseUp","handleCanvasMouseUp","saveDrawing","dataUrl","toDataURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2488cd06.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","// Other imports remain the same\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\n\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\n\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\n\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\nfunction getRandomImageForMood(moodValue) {\n  let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n  moodIndex = moodValue === 100 ? moodLabels.length - 1 : Math.min(moodIndex, moodLabels.length - 1);\n  \n  const moodLabel = moodLabels[moodIndex];\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1;\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState('');\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [isSpeechOpen, setIsSpeechOpen] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false); // Re-added this state\n  const [drawingDataUrl, setDrawingDataUrl] = useState(null);\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n\n  useEffect(() => {\n    const musicSuggestions = [\n      { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n      { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n      { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n      { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n      { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n      { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n    ];\n\n    const currentMusic = musicSuggestions.find(\n      (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n    );\n    setSelectedMusic(currentMusic);\n  }, [mood]);\n\n  function generateDateList() {\n    const today = new Date();\n    const dateList = [];\n    for (let i = 0; i <= 30; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateString = date.toISOString().split('T')[0];\n      dateList.push(dateString);\n    }\n    return dateList;\n  }\n\n  function initializeDiaryEntries(dateList) {\n    return dateList.reduce((entries, date) => {\n      entries[date] = { description: '', mood: 25, imageUrl: null };\n      return entries;\n    }, {});\n  }\n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n  };\n\n  const handleEnter = () => {\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n        drawing: drawingDataUrl,\n        speech: speechResult,\n      },\n    }));\n\n    alert('Entry saved successfully!');\n  };\n\n  const handleInputModeChange = (mode) => {\n    if (activeInputMode !== mode) {\n      clearResults();\n    }\n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      setIsSpeechOpen(true);\n    } else if (mode === 'draw') {\n      setIsDrawingOpen(true);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n    setDrawingDataUrl(null);\n  };\n\n  const startSpeechRecognition = () => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = true;\n    recognition.continuous = true;\n    recognitionRef.current = recognition;\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[event.results.length - 1][0].transcript;\n      setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.start();\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n    setIsSpeechOpen(false);\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    ctx.beginPath();\n    ctx.moveTo(\n      (e.clientX - rect.left) * scaleX,\n      (e.clientY - rect.top) * scaleY\n    );\n    isDrawing.current = true;\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n\n    ctx.lineTo(\n      (e.clientX - rect.left) * scaleX,\n      (e.clientY - rect.top) * scaleY\n    );\n    ctx.stroke();\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    const dataUrl = canvas.toDataURL();\n    setDrawingDataUrl(dataUrl);\n    setIsDrawingOpen(false);\n  };\n\n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => handleInputModeChange('draw')}\n          />\n        </div>\n\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Write your description here...\"\n          />\n        )}\n\n        {activeInputMode === 'speech' && (\n          <div className=\"speech-result\">\n            <h3>Speech-to-Text Result</h3>\n            <p>{speechResult}</p>\n          </div>\n        )}\n\n        {activeInputMode === 'draw' && drawingDataUrl && (\n          <div className=\"drawing-result\">\n            <h3>Drawing Result</h3>\n            <img src={drawingDataUrl} alt=\"Drawing\" className=\"drawing-preview\" />\n          </div>\n        )}\n\n        <button className=\"generate-button\" onClick={handleEnter}>\n          Enter\n        </button>\n\n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-labels\">\n            {moodLabels.map((label) => (\n              <span key={label} className=\"mood-label\">\n                {label}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => setMood(Number(e.target.value))}\n          />\n          <div className=\"mood-value\">Mood: {mood}</div>\n        </div>\n\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist: {selectedMusic.title}</h3>\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n\n        {isSpeechOpen && (\n          <div className=\"popup-overlay\">\n            <div className=\"popup-content\">\n              <h2>Speak now...</h2>\n              <button onClick={startSpeechRecognition}>Start</button>\n              <button onClick={stopSpeechRecognition}>Done</button>\n            </div>\n          </div>\n        )}\n\n        {isDrawingOpen && (\n          <div className=\"popup-overlay\">\n            <div className=\"popup-content\">\n              <canvas\n                ref={canvasRef}\n                className=\"drawing-canvas\"\n                width={550}\n                height={300}\n                onMouseDown={handleCanvasMouseDown}\n                onMouseMove={handleCanvasMouseMove}\n                onMouseUp={handleCanvasMouseUp}\n              />\n              <button onClick={saveDrawing}>Done</button>\n            </div>\n          </div>\n        )}\n\n        {/* Mood Count Display at the bottom right */}\n        <div className=\"mood-count-display\">Mood: {mood}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}