{"version":3,"sources":["AlertModal.js","DrawingModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","DrawingModal","canvasRef","handleCanvasMouseDown","handleCanvasMouseMove","handleCanvasMouseUp","clearCanvas","saveDrawing","ref","width","height","onMouseDown","onMouseMove","onMouseUp","moodLabels","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","initializeMoodAnalysis","reduce","acc","label","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","isSpeechOpen","setIsSpeechOpen","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","moodAnalysis","setMoodAnalysis","lastModalShowDate","setLastModalShowDate","isDrawingModalOpen","setIsDrawingModalOpen","savedDrawing","setSavedDrawing","recognitionRef","useRef","isDrawing","updateMoodAnalysis","useCallback","last14Days","slice","newMoodAnalysis","sadnessCount","fearCount","forEach","entry","moodIndex","Math","floor","moodLabel","daysSinceLastModal","useEffect","currentMusic","moodRange","title","playlistUrl","find","music","handleInputModeChange","mode","clearResults","startSpeechRecognition","stopSpeechRecognition","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","continuous","current","onresult","event","transcript","results","prevResult","onerror","console","error","start","stop","map","index","key","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","handleEnter","image","moodValue","min","imageCount","random","getRandomImageForMood","src","alt","type","max","Number","Object","keys","canvas","ctx","getContext","rect","getBoundingClientRect","scaleX","scaleY","beginPath","moveTo","clientX","left","clientY","top","lineTo","stroke","dataUrl","toDataURL","reimagineDrawing","handleReimagine","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c75cbe5e.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React from 'react';\nimport './DrawingModal.css';\n\nconst DrawingModal = ({\n  isOpen,\n  onClose,\n  canvasRef,\n  handleCanvasMouseDown,\n  handleCanvasMouseMove,\n  handleCanvasMouseUp,\n  clearCanvas,\n  saveDrawing,\n}) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"drawing-modal-overlay\">\n      <div className=\"drawing-modal\">\n        <h2>Draw Your Mood</h2>\n        <canvas\n          ref={canvasRef}\n          className=\"drawing-canvas\"\n          width={500}\n          height={300}\n          onMouseDown={handleCanvasMouseDown}\n          onMouseMove={handleCanvasMouseMove}\n          onMouseUp={handleCanvasMouseUp}\n        />\n        <div className=\"drawing-modal-buttons\">\n          <button onClick={saveDrawing}>Save</button>\n          <button onClick={clearCanvas}>Re-imagine</button>\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DrawingModal;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\nimport DrawingModal from './DrawingModal';\n\n// Constants\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\n// Define the function to get a random image based on mood\nfunction getRandomImageForMood(moodValue) {\n  let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n  moodIndex = moodValue === 100 ? moodLabels.length - 1 : Math.min(moodIndex, moodLabels.length - 1);\n\n  const moodLabel = moodLabels[moodIndex];\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1;\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Define the function to get YouTube video ID\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\n// Generate a list of dates for the past 30 days\nfunction generateDateList() {\n  const today = new Date();\n  const dateList = [];\n  for (let i = 0; i <= 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    dateList.push(dateString);\n  }\n  return dateList;\n}\n\n// Initialize diary entries\nfunction initializeDiaryEntries(dateList) {\n  return dateList.reduce((entries, date) => {\n    entries[date] = { description: '', mood: 25, imageUrl: null };\n    return entries;\n  }, {});\n}\n\n// Initialize mood analysis\nfunction initializeMoodAnalysis() {\n  return moodLabels.reduce((acc, label) => {\n    acc[label] = 0;\n    return acc;\n  }, {});\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState('');\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [isSpeechOpen, setIsSpeechOpen] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [lastModalShowDate, setLastModalShowDate] = useState(null);\n  const [isDrawingModalOpen, setIsDrawingModalOpen] = useState(false);\n  const [savedDrawing, setSavedDrawing] = useState(null); // Add this line to manage saved drawings\n\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n\n  // Wrap updateMoodAnalysis in useCallback\n  const updateMoodAnalysis = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate\n      ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24))\n      : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date());\n    }\n  }, [dateList, diaryEntries, lastModalShowDate]);\n\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries, updateMoodAnalysis]);\n\n  useEffect(() => {\n    const musicSuggestions = [\n      { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n      { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n      { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n      { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n      { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n      { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n    ];\n\n    const currentMusic = musicSuggestions.find(\n      (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n    );\n    setSelectedMusic(currentMusic);\n  }, [mood]);\n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n  };\n\n  const handleEnter = () => {\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n      },\n    }));\n\n    alert('Entry saved successfully!');\n  };\n\n  const handleInputModeChange = (mode) => {\n    if (activeInputMode !== mode) {\n      clearResults();\n    }\n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      setIsSpeechOpen(true);\n      startSpeechRecognition();\n    } else {\n      stopSpeechRecognition();\n      setIsSpeechOpen(false);\n    }\n\n    if (mode === 'draw') {\n      setIsDrawingModalOpen(true);\n    } else {\n      setIsDrawingModalOpen(false);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n  };\n\n  const startSpeechRecognition = () => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = true;\n    recognition.continuous = true;\n    recognitionRef.current = recognition;\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[event.results.length - 1][0].transcript;\n      setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.start();\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.beginPath();\n      ctx.moveTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      isDrawing.current = true;\n    }\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.lineTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      ctx.stroke();\n    }\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const dataUrl = canvas.toDataURL(); // Convert canvas to base64 image data\n      setSavedDrawing(dataUrl); // Store the image data\n      alert('Drawing saved successfully!');\n    }\n    setIsDrawingOpen(false); // Close the drawing modal after saving\n  };\n\n  const handleReimagine = () => {\n    if (!savedDrawing) {\n      alert('No saved drawing to re-imagine.');\n      return;\n    }\n\n    // Set the saved drawing as the image URL\n    setImageUrl(savedDrawing);\n    alert('Image re-imagined based on your drawing!');\n  };\n\n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => {\n              handleInputModeChange('draw');\n              setIsDrawingModalOpen(true);\n            }}\n          />\n        </div>\n\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Write your description here...\"\n          />\n        )}\n\n        {activeInputMode === 'speech' && (\n          <div className=\"speech-result\">\n            <h3>Speech-to-Text Result</h3>\n            <p>{speechResult}</p>\n          </div>\n        )}\n\n        <button className=\"generate-button\" onClick={handleEnter}>\n          Enter\n        </button>\n\n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-labels\">\n            {moodLabels.map((label) => (\n              <span key={label} className=\"mood-label\">\n                {label}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => setMood(Number(e.target.value))}\n          />\n          <div className=\"mood-value\">Mood: {mood}</div>\n        </div>\n\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist: {selectedMusic.title}</h3>\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <div className=\"mood-analysis\">\n          <h3>Past 14 Days Mood Analysis</h3>\n          <ul>\n            {Object.keys(moodAnalysis).map((mood) => (\n              <li key={mood}>\n                {mood}: {moodAnalysis[mood]}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n\n        {isSpeechOpen && (\n          <div className=\"popup-overlay\">\n            <div className=\"popup-content\">\n              <h2>Speak now...</h2>\n              <button onClick={stopSpeechRecognition}>Stop</button>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Add DrawingModal here */}\n      <DrawingModal\n        isOpen={isDrawingModalOpen}\n        onClose={() => setIsDrawingModalOpen(false)}\n        canvasRef={canvasRef}\n        handleCanvasMouseDown={handleCanvasMouseDown}\n        handleCanvasMouseMove={handleCanvasMouseMove}\n        handleCanvasMouseUp={handleCanvasMouseUp}\n        saveDrawing={() => {\n          saveDrawing();\n          setIsDrawingModalOpen(false);\n        }}\n        reimagineDrawing={handleReimagine}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}