{"version":3,"sources":["AlertModal.js","DrawingModal.js","ReviewMemoriesModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","DrawingModal","canvasRef","handleCanvasMouseDown","handleCanvasMouseMove","handleCanvasMouseUp","saveDrawing","reimagineDrawing","savedDrawing","selectedColor","setSelectedColor","useState","useEffect","canvas","current","ctx","getContext","img","Image","src","onload","clearRect","width","height","drawImage","ref","onMouseDown","onMouseMove","onMouseUp","map","color","index","key","style","backgroundColor","margin","border","cursor","borderRadius","strokeStyle","handleColorChange","ReviewMemoriesModal","happyDays","onSelectDate","length","role","aria-label","date","moodLabels","moodEmojis","imageDirectories","imageCounts","getYouTubeVideoId","url","match","initializeMoodAnalysis","reduce","acc","label","PlaylistModal","onSave","selectedMoodForPlaylist","setSelectedMoodForPlaylist","youtubeLink","setYoutubeLink","value","onChange","e","mood","type","placeholder","App","dateList","today","Date","i","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","entries","description","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","isSpeechOpen","setIsSpeechOpen","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","moodAnalysis","setMoodAnalysis","lastModalShowDate","setLastModalShowDate","isDrawingModalOpen","setIsDrawingModalOpen","setSavedDrawing","drawing","recognitionRef","useRef","isDrawing","isRecording","setIsRecording","selectedLanguage","setSelectedLanguage","isLanguageModalOpen","setIsLanguageModalOpen","happyMemories","setHappyMemories","isMemoryModalOpen","setIsMemoryModalOpen","isReviewModalOpen","setIsReviewModalOpen","setHappyDays","isPlaylistModalOpen","setIsPlaylistModalOpen","customPlaylists","setCustomPlaylists","Anger","Neutral","Fear","Sadness","Surprise","Happiness","handleLanguageSelect","useCallback","foundHappyDays","slice","filter","entry","languageCode","startSpeechRecognition","handleReviewMemories","updateMoodAnalysis","last14Days","newMoodAnalysis","sadnessCount","fearCount","forEach","moodIndex","Math","floor","moodLabel","daysSinceLastModal","min","playlistUrl","title","localStorage","setItem","JSON","stringify","savedDiaryEntries","getItem","parse","savedMoodAnalysis","savedPlaylists","savedSelectedDate","handleInputModeChange","mode","stopSpeechRecognition","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","continuous","lastTranscript","onresult","event","transcript","resultIndex","results","result","isFinal","trim","prevResult","onerror","console","error","start","stop","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","_diaryEntries$date4","_diaryEntries$date5","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","handleEnter","image","moodValue","max","imageCount","random","getRandomImageForMood","handleClear","handleSaveCustomPlaylist","prevPlaylists","alt","emoji","newMood","handleMoodChange","Number","Object","keys","rect","getBoundingClientRect","scaleX","scaleY","beginPath","moveTo","clientX","left","clientY","top","lineTo","stroke","dataUrl","toDataURL","handleReimagine","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9266d745.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useEffect, useState } from 'react';\nimport './DrawingModal.css';\n\nfunction DrawingModal({\n  isOpen,\n  onClose,\n  canvasRef,\n  handleCanvasMouseDown,\n  handleCanvasMouseMove,\n  handleCanvasMouseUp,\n  saveDrawing,\n  reimagineDrawing,\n  savedDrawing,\n}) {\n  const [selectedColor, setSelectedColor] = useState('#000000'); // Default color is black\n\n  const colors = ['#000000', '#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FFA500', '#800080', '#00FFFF', '#FFC0CB', '#8B4513']; // Added more colors\n\n  const handleColorChange = (color) => {\n    setSelectedColor(color);\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.strokeStyle = color; // Update drawing color\n    }\n  };\n\n  useEffect(() => {\n    // Load the saved drawing specific to the date if it exists\n    const canvas = canvasRef.current;\n    if (canvas && savedDrawing) {\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.src = savedDrawing;\n      img.onload = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas before loading\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height); // Load the saved image\n      };\n    } else if (canvas) {\n      // Clear the canvas if there's no saved drawing\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  }, [isOpen, savedDrawing]); // Reloads when modal opens or savedDrawing changes\n\n  return (\n    <div className={`drawing-overlay ${isOpen ? 'active' : ''}`}>\n      <div className=\"drawing-modal-content\">\n        <div className=\"modal-decoration\"></div> {/* Optional decoration */}\n        <h2>Draw Your Mood</h2>\n        <canvas\n          ref={canvasRef}\n          className=\"drawing-canvas\"\n          width=\"700\"\n          height=\"700\"\n          onMouseDown={handleCanvasMouseDown}\n          onMouseMove={handleCanvasMouseMove}\n          onMouseUp={handleCanvasMouseUp}\n        />\n        <div className=\"color-palette\">\n          <h3>Select Color:</h3>\n          {colors.map((color, index) => (\n            <button\n              key={index}\n              style={{\n                backgroundColor: color,\n                width: '30px',\n                height: '30px',\n                margin: '2px',\n                border: selectedColor === color ? '2px solid #000' : '1px solid #ccc',\n                cursor: 'pointer',\n                borderRadius: '50%', // Make color buttons circular\n              }}\n              onClick={() => handleColorChange(color)}\n            />\n          ))}\n        </div>\n        <div className=\"drawing-buttons\">\n          <button onClick={saveDrawing}>Save</button>\n          <button onClick={reimagineDrawing}>Re-imagine</button>\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DrawingModal;\n","import React from 'react';\nimport './ReviewMemoriesModal.css'; // Add this for styling\n\nfunction ReviewMemoriesModal({ isOpen, onClose, happyDays, onSelectDate }) {\n  if (!isOpen || happyDays.length === 0) return null; // Do not render if no happy memories\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <h2 className=\"modal-title\">Cheer up <span role=\"img\" aria-label=\"hands\">🙌</span></h2>\n        <p className=\"modal-message\">\n          \"We all have tough days. Here's a happy memory to brighten your day!\"\n        </p>\n        <div className=\"memory-list\">\n          {happyDays.map((date) => (\n            <button\n              key={date}\n              className=\"memory-button\"\n              onClick={() => onSelectDate(date)}\n            >\n              {date}\n            </button>\n          ))}\n        </div>\n        <button className=\"close-button\" onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ReviewMemoriesModal;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\nimport DrawingModal from './DrawingModal';\nimport ReviewMemoriesModal from './ReviewMemoriesModal';\n\n// Constants\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\nconst moodEmojis = [\"😠\", \"😐\", \"😨\", \"😢\", \"😲\", \"😊\"];\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\nfunction getRandomImageForMood(moodValue) {\n  // Ensure moodValue is a valid number between 0 and 100\n  moodValue = Math.max(0, Math.min(100, moodValue));\n\n  // Calculate moodIndex safely\n  const moodIndex = Math.min(\n    Math.floor((moodValue / 100) * moodLabels.length),\n    moodLabels.length - 1 // Ensure it stays within array bounds\n  );\n\n  // Retrieve the mood label safely\n  const moodLabel = moodLabels[moodIndex] || \"Neutral\"; // Fallback to a default mood\n\n  // Get the corresponding directory and image count for the mood label\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1; // Default to 1 if undefined\n\n  // Select a random image index within the range\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  // Construct the image URL and return it\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Define the function to get YouTube video ID\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\n// Generate a list of dates for the past 30 days\nfunction generateDateList() {\n  const today = new Date();\n  const dateList = [];\n  for (let i = 0; i <= 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    dateList.push(dateString);\n  }\n  return dateList;\n}\n\n// Initialize diary entries\nfunction initializeDiaryEntries(dateList) {\n  return dateList.reduce((entries, date) => {\n    entries[date] = { description: '', mood: 25, imageUrl: null };\n    return entries;\n  }, {});\n}\n\n// Initialize mood analysis\nfunction initializeMoodAnalysis() {\n  return moodLabels.reduce((acc, label) => {\n    acc[label] = 0;\n    return acc;\n  }, {});\n}\n\nfunction PlaylistModal({\n  isOpen,\n  onClose,\n  onSave,\n  selectedMoodForPlaylist,\n  setSelectedMoodForPlaylist,\n  youtubeLink,\n  setYoutubeLink,\n}) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"playlist-modal\">\n      <h3>Customize Playlist</h3>\n      <label>\n        Select Mood:\n        <select\n          value={selectedMoodForPlaylist}\n          onChange={(e) => setSelectedMoodForPlaylist(e.target.value)}\n        >\n          {moodLabels.map((mood) => (\n            <option key={mood} value={mood}>\n              {mood}\n            </option>\n          ))}\n        </select>\n      </label>\n      <label>\n        YouTube Link:\n        <input\n          type=\"url\"\n          placeholder=\"Paste YouTube link here\"\n          value={youtubeLink}\n          onChange={(e) => setYoutubeLink(e.target.value)}\n        />\n      </label>\n      <button onClick={() => onSave(selectedMoodForPlaylist, youtubeLink)}>Save</button>\n      <button onClick={onClose}>Cancel</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState(diaryEntries[dateList[0]].speechResult);\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [isSpeechOpen, setIsSpeechOpen] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [lastModalShowDate, setLastModalShowDate] = useState(null);\n  const [isDrawingModalOpen, setIsDrawingModalOpen] = useState(false);\n  const [savedDrawing, setSavedDrawing] = useState(diaryEntries[selectedDate].drawing || null);\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n  const [isRecording, setIsRecording] = useState(false); \n  const [selectedLanguage, setSelectedLanguage] = useState('en-US');\n  const [isLanguageModalOpen, setIsLanguageModalOpen] = useState(false);\n  const [happyMemories, setHappyMemories] = useState([]);\n  const [isMemoryModalOpen, setIsMemoryModalOpen] = useState(false);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [happyDays, setHappyDays] = useState([]);\n  const [isPlaylistModalOpen, setIsPlaylistModalOpen] = useState(false);\n  const [selectedMoodForPlaylist, setSelectedMoodForPlaylist] = useState(\"Anger\");\n  const [youtubeLink, setYoutubeLink] = useState(\"\");\n\n  const [customPlaylists, setCustomPlaylists] = useState({\n    Anger: \"\",\n    Neutral: \"\",\n    Fear: \"\",\n    Sadness: \"\",\n    Surprise: \"\",\n    Happiness: \"\",\n  });  \n\n  const handleSaveCustomPlaylist = (mood, link) => {\n    setCustomPlaylists((prevPlaylists) => ({\n      ...prevPlaylists,\n      [mood]: link,\n    }));\n    setIsPlaylistModalOpen(false);\n    setYoutubeLink(\"\");\n  };  \n\n  const checkForGoodMemories = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const foundHappyDays = last14Days.filter((date) => {\n      const entry = diaryEntries[date];\n      return entry && entry.mood >= 85; // Check for happiness range\n    });\n    setHappyDays(foundHappyDays);\n  }, [dateList, diaryEntries]);\n  \n  const handleMoodChange = (newMood) => {\n    setMood(newMood);\n  \n    // Check if the newMood corresponds to \"fear\" (34-50) or \"sadness\" (51-67)\n    if ((newMood >= 34 && newMood <= 50) || (newMood >= 51 && newMood <= 67)) {\n      // Check for past happy memories when selecting fear or sadness\n      const last14Days = dateList.slice(0, 14);\n      const foundHappyDays = last14Days.filter((date) => {\n        const entry = diaryEntries[date];\n        return entry && entry.mood >= 85; // Check if the mood is \"happy\"\n      });\n  \n      if (foundHappyDays.length > 0) {\n        setHappyDays(foundHappyDays); // Update state with happy days\n        setIsReviewModalOpen(true); // Open the review modal\n      } else {\n        setIsReviewModalOpen(false); // Close the modal if no happy days are found\n      }\n    } else {\n      setIsReviewModalOpen(false); // Ensure the modal is closed for other mood selections\n    }\n  };  \n  \n  const handleLanguageSelect = (languageCode) => {\n    setSelectedLanguage(languageCode);\n    setIsLanguageModalOpen(false); // Close modal\n    startSpeechRecognition(languageCode); // Start speech-to-text with the selected language\n  };\n\n  const handleOpenReviewModal = () => {\n    checkForGoodMemories();\n    setIsReviewModalOpen(true);\n  };\n\n  const handleSelectDate = (date) => {\n    setSelectedDate(date);\n    setIsReviewModalOpen(false);\n  };\n\n  useEffect(() => {\n    if ((mood >= 34 && mood <= 50) || (mood >= 51 && mood <= 67)) {\n      handleReviewMemories();\n    }\n  }, [mood]);\n  \n  // Wrap updateMoodAnalysis in useCallback\n  const updateMoodAnalysis = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate\n      ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24))\n      : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date());\n    }\n  }, [dateList, diaryEntries, lastModalShowDate]);\n\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries, updateMoodAnalysis]);\n\n  useEffect(() => {\n    const moodIndex = Math.min(\n      Math.floor((mood / 100) * moodLabels.length),\n      moodLabels.length - 1 // Stay within bounds\n    );\n    const moodLabel = moodLabels[moodIndex] || \"Neutral\"; // Fallback mood\n  \n    const defaultPlaylists = {\n      Anger: \"https://youtu.be/FLTchCiC0T0?si=_LEx70RIBrG3HC_Z\",\n      Neutral: \"https://youtu.be/pTweN7F2PFA?si=5v6Ney7A9MTtJ086\",\n      Fear: \"https://www.youtube.com/watch?v=0qanF-91aJo\",\n      Sadness: \"https://youtu.be/FFlPgTPvRJc?si=9SzqK2Vf7KaeAsFk\",\n      Surprise: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\",\n      Happiness: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\",\n    };\n  \n    const playlistUrl = customPlaylists[moodLabel] || defaultPlaylists[moodLabel];\n  \n    setSelectedMusic({\n      title: `${moodLabel} Playlist`,\n      playlistUrl,\n    });\n  }, [mood, customPlaylists]);\n\n  useEffect(() => {\n    // Save diary entries to LocalStorage\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\n  }, [diaryEntries]);\n  \n  useEffect(() => {\n    // Save mood analysis to LocalStorage\n    localStorage.setItem('moodAnalysis', JSON.stringify(moodAnalysis));\n  }, [moodAnalysis]);\n  \n  useEffect(() => {\n    // Save custom playlists to LocalStorage\n    localStorage.setItem('customPlaylists', JSON.stringify(customPlaylists));\n  }, [customPlaylists]);  \n\n  useEffect(() => {\n    // Load diary entries from LocalStorage\n    const savedDiaryEntries = localStorage.getItem('diaryEntries');\n    if (savedDiaryEntries) {\n      setDiaryEntries(JSON.parse(savedDiaryEntries));\n    }\n  \n    // Load mood analysis from LocalStorage\n    const savedMoodAnalysis = localStorage.getItem('moodAnalysis');\n    if (savedMoodAnalysis) {\n      setMoodAnalysis(JSON.parse(savedMoodAnalysis));\n    }\n  \n    // Load custom playlists from LocalStorage\n    const savedPlaylists = localStorage.getItem('customPlaylists');\n    if (savedPlaylists) {\n      setCustomPlaylists(JSON.parse(savedPlaylists));\n    }\n  }, []); // Run once on component mount\n  \n  useEffect(() => {\n    // Save selected date\n    localStorage.setItem('selectedDate', selectedDate);\n  }, [selectedDate]);\n  \n  useEffect(() => {\n    // Load selected date\n    const savedSelectedDate = localStorage.getItem('selectedDate');\n    if (savedSelectedDate) {\n      setSelectedDate(savedSelectedDate);\n    }\n  }, []);  \n\n  const handleClear = () => {\n    if (activeInputMode === 'typing') {\n      setPrompt('');\n    } else if (activeInputMode === 'speech') {\n      setSpeechResult('');\n    }\n  };\n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n        drawing: savedDrawing,\n        speechResult: speechResult,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n    setSavedDrawing(diaryEntries[date]?.drawing || null);\n    setSpeechResult(diaryEntries[date]?.speechResult || ''); \n  };\n\n  const handleEnter = () => {\n    if (activeInputMode === 'speech') {\n      if (isRecording) {\n        stopSpeechRecognition();\n        setDiaryEntries((prevEntries) => ({\n          ...prevEntries,\n          [selectedDate]: {\n            ...prevEntries[selectedDate],\n            speechResult: speechResult, // Save speech result for the selected date\n          },\n        }));\n        alert('Recording stopped and entry saved successfully!');\n      } else {\n        startSpeechRecognition();\n        alert('Recording started...');\n      }\n    } else{\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n        speechResult: speechResult,\n      },\n    }));\n    alert('Entry saved successfully!');\n    }\n  };\n\n  const handleInputModeChange = (mode) => {\n    setActiveInputMode(mode);\n    if (isRecording) stopSpeechRecognition();\n    setActiveInputMode(mode);\n    if (mode === 'speech') setIsLanguageModalOpen(true); \n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      //setIsSpeechOpen(true);\n      startSpeechRecognition();\n    } else {\n      stopSpeechRecognition();\n      //setIsSpeechOpen(false);\n    }\n\n    if (mode === 'draw') {\n      setIsDrawingModalOpen(true);\n    } else {\n      setIsDrawingModalOpen(false);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n  };\n\n  const startSpeechRecognition = (languageCode) => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = languageCode;\n    recognition.interimResults = false;\n    recognition.continuous = true;\n    recognitionRef.current = recognition;\n\n    let lastTranscript = \"\"; \n\n    recognition.onresult = (event) => {\n      let transcript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n          const result = event.results[i];\n          if (result.isFinal) {  // Append only if the result is final\n              transcript += result[0].transcript.trim();\n          }\n      }\n\n      // Avoid duplicating words by comparing with the last appended text\n      if (transcript && transcript !== lastTranscript) {\n          setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n          lastTranscript = transcript;  // Update last transcript to the new one\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.start();\n    setIsRecording(true);\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.beginPath();\n      ctx.moveTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      isDrawing.current = true;\n    }\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.lineTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      ctx.stroke();\n    }\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const dataUrl = canvas.toDataURL(); // Convert canvas to base64 image data\n      setSavedDrawing(dataUrl); // Store the image data for the selected date\n      setDiaryEntries((prevEntries) => ({\n        ...prevEntries,\n        [selectedDate]: {\n          ...prevEntries[selectedDate],\n          drawing: dataUrl,\n        },\n      }));\n      alert('Drawing saved successfully!');\n    }\n    //setIsDrawingOpen(false); // Close the drawing modal after saving\n  };\n\n  const handleReimagine = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      // Clear the entire canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  \n    // Reset the savedDrawing state to clear the drawing in the state\n    setSavedDrawing(null);\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        drawing: null,\n      },\n    }));\n    alert('The drawing has been cleared for re-imagining!');\n  };\n  \n  const handleReviewMemories = () => {\n    const last14Days = dateList.slice(0, 14);\n    const happyDays = last14Days.filter(date => {\n      const entry = diaryEntries[date];\n      return entry && entry.mood >= 85; // Assuming 85-100 is happiness\n    });\n\n    if (happyDays.length > 0) {\n      setHappyMemories(happyDays);\n      setIsMemoryModalOpen(true);\n    }\n  };\n\n  useEffect(() => {\n    if (mood < 51) { // Assuming 0-50 is sadness or fear\n      handleReviewMemories();\n    }\n  }, [mood]);\n  \n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => {\n              handleInputModeChange('draw');\n              setIsDrawingModalOpen(true);\n            }}\n          />\n        </div>\n        \n        {isLanguageModalOpen && (\n          <div className=\"language-modal\">\n            <h3>Choose Language for Speech-to-Text</h3>\n            <button onClick={() => handleLanguageSelect('en-US')}>English</button>\n            <button onClick={() => handleLanguageSelect('zh-TW')}>Taiwanese</button>\n          </div>\n        )}\n\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Write your description here...\"\n          />\n        )}\n\n        {activeInputMode === 'speech' && (\n          <div className=\"speech-result\">\n            <h3>Speech-to-Text Result</h3>\n            <p>{speechResult}</p>\n          </div>\n        )}\n        <div className=\"button-container\">\n          <button className=\"button enter-button\" onClick={handleEnter}>\n            Enter\n          </button>\n          <button className=\"button clear-button\" onClick={handleClear}>\n            Clear\n          </button>\n          <button\n            className=\"button customize-playlist-button\"\n            onClick={() => setIsPlaylistModalOpen(true)}\n          >\n            Music\n          </button>\n        </div>\n        \n        <PlaylistModal\n          isOpen={isPlaylistModalOpen}\n          onClose={() => setIsPlaylistModalOpen(false)}\n          onSave={handleSaveCustomPlaylist}\n          selectedMoodForPlaylist={selectedMoodForPlaylist}\n          setSelectedMoodForPlaylist={setSelectedMoodForPlaylist}\n          youtubeLink={youtubeLink}\n          setYoutubeLink={setYoutubeLink}\n        />\n\n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-emojis\">\n            {moodEmojis.map((emoji, index) => (\n              <span key={index} className=\"mood-emoji\">\n                {emoji}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => handleMoodChange(Number(e.target.value))}\n          />\n        </div>\n\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist:</h3>\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <div className=\"mood-analysis\">\n          <h3>Past 14 Days Mood Analysis</h3>\n          <ul>\n            {Object.keys(moodAnalysis).map((mood, index) => (\n              <li key={mood}>\n                {moodLabels[index]} {moodEmojis[index]}: {moodAnalysis[mood]}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n      </div>\n\n      {/* Add DrawingModal here */}\n      <DrawingModal\n        isOpen={isDrawingModalOpen}\n        onClose={() => setIsDrawingModalOpen(false)}\n        canvasRef={canvasRef}\n        handleCanvasMouseDown={handleCanvasMouseDown}\n        handleCanvasMouseMove={handleCanvasMouseMove}\n        handleCanvasMouseUp={handleCanvasMouseUp}\n        saveDrawing={saveDrawing}\n        reimagineDrawing={handleReimagine}\n        savedDrawing={savedDrawing} // Pass the saved drawing to the modal\n      />\n\n      {isReviewModalOpen && (\n        <ReviewMemoriesModal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n          happyDays={happyDays}\n          onSelectDate={handleSelectDate}\n        />\n      )}\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}