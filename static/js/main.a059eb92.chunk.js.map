{"version":3,"sources":["AlertModal.js","DrawingModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","DrawingModal","canvasRef","handleCanvasMouseDown","handleCanvasMouseMove","handleCanvasMouseUp","saveDrawing","reimagineDrawing","savedDrawing","useEffect","canvas","current","ctx","getContext","img","Image","src","onload","clearRect","width","height","drawImage","ref","onMouseDown","onMouseMove","onMouseUp","moodLabels","moodEmojis","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","initializeMoodAnalysis","reduce","acc","label","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","isSpeechOpen","setIsSpeechOpen","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","moodAnalysis","setMoodAnalysis","lastModalShowDate","setLastModalShowDate","isDrawingModalOpen","setIsDrawingModalOpen","setSavedDrawing","drawing","recognitionRef","useRef","isDrawing","isRecording","setIsRecording","selectedLanguage","setSelectedLanguage","isLanguageModalOpen","setIsLanguageModalOpen","handleLanguageSelect","languageCode","startSpeechRecognition","updateMoodAnalysis","useCallback","last14Days","slice","newMoodAnalysis","sadnessCount","fearCount","forEach","entry","moodIndex","Math","floor","moodLabel","daysSinceLastModal","currentMusic","moodRange","title","playlistUrl","find","music","handleInputModeChange","mode","stopSpeechRecognition","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","continuous","lastTranscript","onresult","event","transcript","resultIndex","results","result","isFinal","trim","prevResult","onerror","console","error","start","stop","map","index","key","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","_diaryEntries$date4","_diaryEntries$date5","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","handleEnter","image","moodValue","min","imageCount","random","getRandomImageForMood","handleClear","alt","emoji","type","max","Number","Object","keys","rect","getBoundingClientRect","scaleX","scaleY","beginPath","moveTo","clientX","left","clientY","top","lineTo","stroke","dataUrl","toDataURL","handleReimagine","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a059eb92.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useEffect } from 'react';\n\nfunction DrawingModal({\n  isOpen,\n  onClose,\n  canvasRef,\n  handleCanvasMouseDown,\n  handleCanvasMouseMove,\n  handleCanvasMouseUp,\n  saveDrawing,\n  reimagineDrawing,\n  savedDrawing,\n}) {\n  useEffect(() => {\n    // Load the saved drawing specific to the date if it exists\n    const canvas = canvasRef.current;\n    if (canvas && savedDrawing) {\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.src = savedDrawing;\n      img.onload = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas before loading\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height); // Load the saved image\n      };\n    } else if (canvas) {\n      // Clear the canvas if there's no saved drawing\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  }, [isOpen, savedDrawing]); // Reloads when modal opens or savedDrawing changes\n\n  return (\n    <div className={`drawing-overlay ${isOpen ? 'active' : ''}`}>\n      <div className=\"drawing-modal-content\">\n        <h2>Draw Your Mood</h2>\n        <canvas\n          ref={canvasRef}\n          className=\"drawing-canvas\"\n          width=\"400\"\n          height=\"400\"\n          onMouseDown={handleCanvasMouseDown}\n          onMouseMove={handleCanvasMouseMove}\n          onMouseUp={handleCanvasMouseUp}\n        />\n        <div className=\"drawing-buttons\">\n          <button onClick={saveDrawing}>Save</button>\n          <button onClick={reimagineDrawing}>Re-imagine</button>\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DrawingModal;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\nimport DrawingModal from './DrawingModal';\n\n// Constants\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\nconst moodEmojis = [\"😠\", \"😐\", \"😨\", \"😢\", \"😲\", \"😊\"];\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\n// Define the function to get a random image based on mood\nfunction getRandomImageForMood(moodValue) {\n  let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n  moodIndex = moodValue === 100 ? moodLabels.length - 1 : Math.min(moodIndex, moodLabels.length - 1);\n\n  const moodLabel = moodLabels[moodIndex];\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1;\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Define the function to get YouTube video ID\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\n// Generate a list of dates for the past 30 days\nfunction generateDateList() {\n  const today = new Date();\n  const dateList = [];\n  for (let i = 0; i <= 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    dateList.push(dateString);\n  }\n  return dateList;\n}\n\n// Initialize diary entries\nfunction initializeDiaryEntries(dateList) {\n  return dateList.reduce((entries, date) => {\n    entries[date] = { description: '', mood: 25, imageUrl: null };\n    return entries;\n  }, {});\n}\n\n// Initialize mood analysis\nfunction initializeMoodAnalysis() {\n  return moodLabels.reduce((acc, label) => {\n    acc[label] = 0;\n    return acc;\n  }, {});\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState(diaryEntries[dateList[0]].speechResult);\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [isSpeechOpen, setIsSpeechOpen] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [lastModalShowDate, setLastModalShowDate] = useState(null);\n  const [isDrawingModalOpen, setIsDrawingModalOpen] = useState(false);\n  const [savedDrawing, setSavedDrawing] = useState(diaryEntries[selectedDate].drawing || null);\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n  const [isRecording, setIsRecording] = useState(false); \n  const [selectedLanguage, setSelectedLanguage] = useState('en-US');\n  const [isLanguageModalOpen, setIsLanguageModalOpen] = useState(false);\n\n  const handleLanguageSelect = (languageCode) => {\n    setSelectedLanguage(languageCode);\n    setIsLanguageModalOpen(false); // Close modal\n    startSpeechRecognition(languageCode); // Start speech-to-text with the selected language\n  };\n\n  // Wrap updateMoodAnalysis in useCallback\n  const updateMoodAnalysis = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate\n      ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24))\n      : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date());\n    }\n  }, [dateList, diaryEntries, lastModalShowDate]);\n\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries, updateMoodAnalysis]);\n\n  useEffect(() => {\n    const musicSuggestions = [\n      { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n      { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n      { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n      { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n      { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n      { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n    ];\n\n    const currentMusic = musicSuggestions.find(\n      (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n    );\n    setSelectedMusic(currentMusic);\n  }, [mood]);\n\n  const handleClear = () => {\n    if (activeInputMode === 'typing') {\n      setPrompt('');\n    } else if (activeInputMode === 'speech') {\n      setSpeechResult('');\n    }\n  };\n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n        drawing: savedDrawing,\n        speechResult: speechResult,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n    setSavedDrawing(diaryEntries[date]?.drawing || null);\n    setSpeechResult(diaryEntries[date]?.speechResult || ''); \n  };\n\n  const handleEnter = () => {\n    if (activeInputMode === 'speech') {\n      if (isRecording) {\n        stopSpeechRecognition();\n        setDiaryEntries((prevEntries) => ({\n          ...prevEntries,\n          [selectedDate]: {\n            ...prevEntries[selectedDate],\n            speechResult: speechResult, // Save speech result for the selected date\n          },\n        }));\n        alert('Recording stopped and entry saved successfully!');\n      } else {\n        startSpeechRecognition();\n        alert('Recording started...');\n      }\n    } else{\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n        speechResult: speechResult,\n      },\n    }));\n    alert('Entry saved successfully!');\n    }\n  };\n\n  const handleInputModeChange = (mode) => {\n    setActiveInputMode(mode);\n    if (isRecording) stopSpeechRecognition();\n    setActiveInputMode(mode);\n    if (mode === 'speech') setIsLanguageModalOpen(true); \n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      setIsSpeechOpen(true);\n      startSpeechRecognition();\n    } else {\n      stopSpeechRecognition();\n      setIsSpeechOpen(false);\n    }\n\n    if (mode === 'draw') {\n      setIsDrawingModalOpen(true);\n    } else {\n      setIsDrawingModalOpen(false);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n  };\n\n  const startSpeechRecognition = (languageCode) => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = languageCode;\n    recognition.interimResults = false;\n    recognition.continuous = true;\n    recognitionRef.current = recognition;\n\n    let lastTranscript = \"\"; \n\n    recognition.onresult = (event) => {\n      let transcript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n          const result = event.results[i];\n          if (result.isFinal) {  // Append only if the result is final\n              transcript += result[0].transcript.trim();\n          }\n      }\n\n      // Avoid duplicating words by comparing with the last appended text\n      if (transcript && transcript !== lastTranscript) {\n          setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n          lastTranscript = transcript;  // Update last transcript to the new one\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.start();\n    setIsRecording(true);\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.beginPath();\n      ctx.moveTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      isDrawing.current = true;\n    }\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.lineTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      ctx.stroke();\n    }\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const dataUrl = canvas.toDataURL(); // Convert canvas to base64 image data\n      setSavedDrawing(dataUrl); // Store the image data for the selected date\n      setDiaryEntries((prevEntries) => ({\n        ...prevEntries,\n        [selectedDate]: {\n          ...prevEntries[selectedDate],\n          drawing: dataUrl,\n        },\n      }));\n      alert('Drawing saved successfully!');\n    }\n    setIsDrawingOpen(false); // Close the drawing modal after saving\n  };\n\n  const handleReimagine = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      // Clear the entire canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  \n    // Reset the savedDrawing state to clear the drawing in the state\n    setSavedDrawing(null);\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        drawing: null,\n      },\n    }));\n    alert('The drawing has been cleared for re-imagining!');\n  };\n  \n  \n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => {\n              handleInputModeChange('draw');\n              setIsDrawingModalOpen(true);\n            }}\n          />\n        </div>\n        \n        {isLanguageModalOpen && (\n          <div className=\"language-modal\">\n            <h3>Choose Language for Speech-to-Text</h3>\n            <button onClick={() => handleLanguageSelect('en-US')}>English</button>\n            <button onClick={() => handleLanguageSelect('zh-TW')}>Taiwanese</button>\n          </div>\n        )}\n\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Write your description here...\"\n          />\n        )}\n\n        {activeInputMode === 'speech' && (\n          <div className=\"speech-result\">\n            <h3>Speech-to-Text Result</h3>\n            <p>{speechResult}</p>\n          </div>\n        )}\n        <div className=\"button-container\">\n          <button className=\"button enter-button\" onClick={handleEnter}>\n            Enter\n          </button>\n\n          <button className=\"button clear-button\" onClick={handleClear}>\n              Clear\n          </button>\n        </div>\n        \n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-emojis\">\n            {moodEmojis.map((emoji, index) => (\n              <span key={index} className=\"mood-emoji\">\n                {emoji}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => setMood(Number(e.target.value))}\n          />\n        </div>\n\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist:</h3>\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <div className=\"mood-analysis\">\n          <h3>Past 14 Days Mood Analysis</h3>\n          <ul>\n            {Object.keys(moodAnalysis).map((mood, index) => (\n              <li key={mood}>\n                {moodLabels[index]} {moodEmojis[index]}: {moodAnalysis[mood]}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n      </div>\n\n      {/* Add DrawingModal here */}\n      <DrawingModal\n        isOpen={isDrawingModalOpen}\n        onClose={() => setIsDrawingModalOpen(false)}\n        canvasRef={canvasRef}\n        handleCanvasMouseDown={handleCanvasMouseDown}\n        handleCanvasMouseMove={handleCanvasMouseMove}\n        handleCanvasMouseUp={handleCanvasMouseUp}\n        saveDrawing={saveDrawing}\n        reimagineDrawing={handleReimagine}\n        savedDrawing={savedDrawing} // Pass the saved drawing to the modal\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}