{"version":3,"sources":["cat.gif","AlertModal.js","DrawingModal.js","ReviewMemoriesModal.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","DrawingModal","canvasRef","handleCanvasMouseDown","handleCanvasMouseMove","handleCanvasMouseUp","saveDrawing","reimagineDrawing","savedDrawing","selectedColor","setSelectedColor","useState","useEffect","canvas","current","ctx","getContext","img","Image","src","onload","clearRect","width","height","drawImage","ref","onMouseDown","onMouseMove","onMouseUp","map","color","index","key","style","backgroundColor","margin","border","cursor","borderRadius","strokeStyle","handleColorChange","ReviewMemoriesModal","happyDays","onSelectDate","length","role","aria-label","date","moodLabels","moodEmojis","imageDirectories","imageCounts","ImageUploadModal","onSave","onRemoveImage","onResetToDefault","selectedMoodForImage","setSelectedMoodForImage","uploadedImage","setUploadedImage","selectedMoodForPlaylist","setSelectedMoodForPlaylist","value","onChange","e","mood","type","accept","event","file","files","reader","FileReader","result","readAsDataURL","alt","getRandomImageForMood","moodValue","customMoodImages","moodIndex","Math","min","floor","moodLabel","allImages","Array","from","_","random","getYouTubeVideoId","url","match","initializeMoodAnalysis","reduce","acc","label","PlaylistModal","_ref2","youtubeLink","setYoutubeLink","placeholder","App","dateList","today","Date","i","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","entries","description","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","activeInputMode","setActiveInputMode","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","moodAnalysis","setMoodAnalysis","lastModalShowDate","setLastModalShowDate","isDrawingModalOpen","setIsDrawingModalOpen","setSavedDrawing","drawing","recognitionRef","useRef","isDrawing","isRecording","setIsRecording","isLanguageModalOpen","setIsLanguageModalOpen","happyMemories","setHappyMemories","isMemoryModalOpen","setIsMemoryModalOpen","isReviewModalOpen","setIsReviewModalOpen","setHappyDays","isPlaylistModalOpen","setIsPlaylistModalOpen","isImageUploadModalOpen","setIsImageUploadModalOpen","isOtherFunctionModalOpen","setIsOtherFunctionModalOpen","isRemoveImageModalOpen","setIsRemoveImageModalOpen","moodToRemoveImages","setMoodToRemoveImages","backgroundMusic","setBackgroundMusic","isBackgroundMusicPlaying","setIsBackgroundMusicPlaying","isFAQModalOpen","setIsFAQModalOpen","youtubePlayer","setYoutubePlayer","setCustomMoodImages","Anger","Neutral","Fear","Sadness","Surprise","Happiness","customPlaylists","setCustomPlaylists","handleLanguageSelect","useCallback","foundHappyDays","slice","filter","entry","languageCode","startSpeechRecognition","handleReviewMemories","updateMoodAnalysis","last14Days","newMoodAnalysis","sadnessCount","fearCount","forEach","daysSinceLastModal","tag","document","firstScriptTag","getElementsByTagName","parentNode","insertBefore","window","onYouTubeIframeAPIReady","YT","Player","videoId","events","onReady","loadVideoById","savedBackgroundMusic","localStorage","getItem","playlistUrl","title","savedImages","JSON","parse","setItem","stringify","savedDiaryEntries","savedMoodAnalysis","savedPlaylists","cat","querySelector","adjustSpeed","animationDuration","addEventListener","removeEventListener","savedSelectedDate","handleInputModeChange","mode","stopSpeechRecognition","alert","recognition","webkitSpeechRecognition","lang","interimResults","continuous","lastTranscript","onresult","transcript","resultIndex","results","isFinal","trim","prevResult","onerror","console","error","start","stop","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","_diaryEntries$date4","_diaryEntries$date5","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","readOnly","handleEnter","image","handleClear","handleSaveCustomPlaylist","prevPlaylists","emoji","max","newMood","prevMood","handleMoodChange","Number","Object","keys","rect","getBoundingClientRect","scaleX","scaleY","beginPath","moveTo","clientX","left","clientY","top","lineTo","stroke","dataUrl","toDataURL","handleReimagine","handleCloseModal","handleSaveCustomImage","prevImages","updatedImages","handleResetToDefault","confirm","removeItem","confirmRemoveImage","customImages","toggleBackgroundMusic","pauseVideo","playVideo","id","handleCatClick","catGif","handleCloseFAQModal","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.36943ff2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.8909de12.gif\";","import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useEffect, useState } from 'react';\nimport './DrawingModal.css';\n\nfunction DrawingModal({\n  isOpen,\n  onClose,\n  canvasRef,\n  handleCanvasMouseDown,\n  handleCanvasMouseMove,\n  handleCanvasMouseUp,\n  saveDrawing,\n  reimagineDrawing,\n  savedDrawing,\n}) {\n  const [selectedColor, setSelectedColor] = useState('#000000'); // Default color is black\n\n  const colors = ['#000000', '#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FFA500', '#800080', '#00FFFF', '#FFC0CB', '#8B4513']; // Added more colors\n\n  const handleColorChange = (color) => {\n    setSelectedColor(color);\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.strokeStyle = color; // Update drawing color\n    }\n  };\n\n  useEffect(() => {\n    // Load the saved drawing specific to the date if it exists\n    const canvas = canvasRef.current;\n    if (canvas && savedDrawing) {\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.src = savedDrawing;\n      img.onload = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas before loading\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height); // Load the saved image\n      };\n    } else if (canvas) {\n      // Clear the canvas if there's no saved drawing\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  }, [isOpen, savedDrawing]); // Reloads when modal opens or savedDrawing changes\n\n  return (\n    <div className={`drawing-overlay ${isOpen ? 'active' : ''}`}>\n      <div className=\"drawing-modal-content\">\n        <div className=\"modal-decoration\"></div> {/* Optional decoration */}\n        <h2>Draw Your Mood</h2>\n        <canvas\n          ref={canvasRef}\n          className=\"drawing-canvas\"\n          width=\"700\"\n          height=\"700\"\n          onMouseDown={handleCanvasMouseDown}\n          onMouseMove={handleCanvasMouseMove}\n          onMouseUp={handleCanvasMouseUp}\n        />\n        <div className=\"color-palette\">\n          <h3>Select Color:</h3>\n          {colors.map((color, index) => (\n            <button\n              key={index}\n              style={{\n                backgroundColor: color,\n                width: '30px',\n                height: '30px',\n                margin: '2px',\n                border: selectedColor === color ? '2px solid #000' : '1px solid #ccc',\n                cursor: 'pointer',\n                borderRadius: '50%', // Make color buttons circular\n              }}\n              onClick={() => handleColorChange(color)}\n            />\n          ))}\n        </div>\n        <div className=\"drawing-buttons\">\n          <button onClick={saveDrawing}>Save</button>\n          <button onClick={reimagineDrawing}>Re-imagine</button>\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DrawingModal;\n","import React from 'react';\nimport './ReviewMemoriesModal.css'; // Add this for styling\n\nfunction ReviewMemoriesModal({ isOpen, onClose, happyDays, onSelectDate }) {\n  if (!isOpen || happyDays.length === 0) return null; // Do not render if no happy memories\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <h2 className=\"modal-title\">Cheer up <span role=\"img\" aria-label=\"hands\">🙌</span></h2>\n        <p className=\"modal-message\">\n          \"We all have tough days. Here's a happy memory to brighten your day!\"\n        </p>\n        <div className=\"memory-list\">\n          {happyDays.map((date) => (\n            <button\n              key={date}\n              className=\"memory-button\"\n              onClick={() => onSelectDate(date)}\n            >\n              {date}\n            </button>\n          ))}\n        </div>\n        <button className=\"close-button\" onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ReviewMemoriesModal;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\nimport DrawingModal from './DrawingModal';\nimport ReviewMemoriesModal from './ReviewMemoriesModal';\nimport catGif from './cat.gif';\n\n// Constants\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\nconst moodEmojis = [\"😠\", \"😐\", \"😨\", \"😢\", \"😲\", \"😊\"];\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\nfunction ImageUploadModal({\n  isOpen,\n  onClose,\n  onSave,\n  onRemoveImage,\n  onResetToDefault,\n  selectedMoodForImage,\n  setSelectedMoodForImage,\n  uploadedImage, // Receive uploadedImage as a prop\n  setUploadedImage, // Receive setUploadedImage as a prop\n  selectedMoodForPlaylist, // Add here\n  setSelectedMoodForPlaylist, // Add here\n}) {\n  const handleImageChange = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        setUploadedImage(reader.result); // Update global state for uploadedImage\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"image-upload-modal yellow-theme\">\n        <h3>Upload Image for Mood</h3>\n        <label>\n          Select Option:\n          <select\n            value={selectedMoodForPlaylist}\n            onChange={(e) => setSelectedMoodForPlaylist(e.target.value)}\n          >\n            {moodLabels.map((mood) => (\n              <option key={mood} value={mood}>\n                {mood}\n              </option>\n            ))}\n          </select>\n        </label>\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageChange} />\n        {uploadedImage && (\n          <div className=\"uploaded-preview\">\n            <img src={uploadedImage} alt=\"Uploaded preview\" />\n          </div>\n        )}\n        <div className=\"modal-buttons\">\n          <button className=\"button save-button\" onClick={() => onSave(selectedMoodForImage, uploadedImage)}>\n            Save\n          </button>\n          <button className=\"button remove-button\" onClick={() => onRemoveImage(selectedMoodForImage)}>\n            Remove\n          </button>\n          <button className=\"button reset-button\" onClick={onResetToDefault}>\n            Default\n          </button>\n          <button className=\"button cancel-button\" onClick={onClose}>\n            Cancel\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getRandomImageForMood(moodValue, customMoodImages) {\n  const moodIndex = Math.min(\n    Math.floor((moodValue / 100) * moodLabels.length),\n    moodLabels.length - 1 // Stay within bounds\n  );\n  const moodLabel = moodLabels[moodIndex];\n\n  // Get custom images for this mood\n  const customImages = customMoodImages[moodLabel] || [];\n\n  // Add folder-based images for this mood\n  const folderImages = Array.from(\n    { length: imageCounts[moodLabel] || 0 },\n    (_, index) =>\n      `${process.env.PUBLIC_URL}/${imageDirectories[moodLabel]}/image${index + 1}.jpg`\n  );\n\n  // Combine custom and folder-based images\n  const allImages = [...customImages, ...folderImages];\n\n  // Pick a random image\n  const randomIndex = Math.floor(Math.random() * allImages.length);\n  return allImages[randomIndex];\n}\n\n// Define the function to get YouTube video ID\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\n// Generate a list of dates for the past 30 days\nfunction generateDateList() {\n  const today = new Date();\n  const dateList = [];\n  for (let i = 0; i <= 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    dateList.push(dateString);\n  }\n  return dateList;\n}\n\n// Initialize diary entries\nfunction initializeDiaryEntries(dateList) {\n  return dateList.reduce((entries, date) => {\n    entries[date] = { description: '', mood: 25, imageUrl: null };\n    return entries;\n  }, {});\n}\n\n// Initialize mood analysis\nfunction initializeMoodAnalysis() {\n  return moodLabels.reduce((acc, label) => {\n    acc[label] = 0;\n    return acc;\n  }, {});\n}\n\nfunction PlaylistModal({\n  isOpen,\n  onClose,\n  onSave,\n  selectedMoodForPlaylist,\n  setSelectedMoodForPlaylist,\n  youtubeLink,\n  setYoutubeLink,\n}) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"playlist-modal\">\n      <h3>Customize Playlist</h3>\n      <label>\n        Select Option:\n        <select\n          value={selectedMoodForPlaylist}\n          onChange={(e) => setSelectedMoodForPlaylist(e.target.value)}\n        >\n          <option value=\"Background Music\">Background Music</option> {/* Add this */}\n          {moodLabels.map((mood) => (\n            <option key={mood} value={mood}>\n              {mood}\n            </option>\n          ))}\n        </select>\n      </label>\n      <label>\n        YouTube Link:\n        <input\n          type=\"url\"\n          placeholder=\"Paste YouTube link here\"\n          value={youtubeLink}\n          onChange={(e) => setYoutubeLink(e.target.value)}\n        />\n      </label>\n      <button onClick={() => onSave(selectedMoodForPlaylist, youtubeLink)}>Save</button>\n      <button onClick={onClose}>Cancel</button>\n    </div>\n  );\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState(diaryEntries[dateList[0]].speechResult);\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [lastModalShowDate, setLastModalShowDate] = useState(null);\n  const [isDrawingModalOpen, setIsDrawingModalOpen] = useState(false);\n  const [savedDrawing, setSavedDrawing] = useState(diaryEntries[selectedDate].drawing || null);\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n  const [isRecording, setIsRecording] = useState(false); \n  //const [selectedLanguage, setSelectedLanguage] = useState('en-US');\n  const [isLanguageModalOpen, setIsLanguageModalOpen] = useState(false);\n  const [happyMemories, setHappyMemories] = useState([]);\n  const [isMemoryModalOpen, setIsMemoryModalOpen] = useState(false);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [happyDays, setHappyDays] = useState([]);\n  const [isPlaylistModalOpen, setIsPlaylistModalOpen] = useState(false);\n  const [selectedMoodForPlaylist, setSelectedMoodForPlaylist] = useState(\"Anger\");\n  const [youtubeLink, setYoutubeLink] = useState(\"\");\n  const [isImageUploadModalOpen, setIsImageUploadModalOpen] = useState(false);\n  const [selectedMoodForImage, setSelectedMoodForImage] = useState(\"Anger\");\n  const [isOtherFunctionModalOpen, setIsOtherFunctionModalOpen] = useState(false);\n  const [isRemoveImageModalOpen, setIsRemoveImageModalOpen] = useState(false);\n  const [moodToRemoveImages, setMoodToRemoveImages] = useState(\"Anger\");\n  const [uploadedImage, setUploadedImage] = useState(null);\n  const [backgroundMusic, setBackgroundMusic] = useState(\"https://youtu.be/CFGLoQIhmow?si=SQ5DQVCCAmKdOt3K\"); // Default YouTube link\n  const [isBackgroundMusicPlaying, setIsBackgroundMusicPlaying] = useState(false); // Tracks music playback\n  const [isFAQModalOpen, setIsFAQModalOpen] = useState(false);\n  const [youtubePlayer, setYoutubePlayer] = useState(null); // Reference to YouTube IFrame player\n  const [customMoodImages, setCustomMoodImages] = useState({\n    Anger: [],\n    Neutral: [],\n    Fear: [],\n    Sadness: [],\n    Surprise: [],\n    Happiness: [],\n  });  \n\n  const toggleBackgroundMusic = () => {\n    if (!youtubePlayer) return;\n  \n    if (isBackgroundMusicPlaying) {\n      youtubePlayer.pauseVideo(); // Pause music\n    } else {\n      youtubePlayer.playVideo(); // Play music\n    }\n    setIsBackgroundMusicPlaying(!isBackgroundMusicPlaying); // Toggle playback state\n  };  \n\n  const handleSaveCustomImage = (mood, image) => {\n    if (!image) {\n      alert(\"No image selected. Please upload an image before saving.\");\n      return; // Exit early if no image is provided\n    }\n  \n    // Update the custom mood images state\n    setCustomMoodImages((prevImages) => ({\n      ...prevImages,\n      [mood]: [...(prevImages[mood] || []), image], // Add the new image to the existing list\n    }));\n  \n    // Save the updated images to LocalStorage for persistence\n    try {\n      const updatedImages = {\n        ...customMoodImages,\n        [mood]: [...(customMoodImages[mood] || []), image],\n      };\n      localStorage.setItem(\"customMoodImages\", JSON.stringify(updatedImages));\n    } catch (error) {\n      console.error(\"Error saving image to localStorage:\", error);\n      alert(\"An error occurred while saving the image. Please try again.\");\n      return; // Exit if an error occurs\n    }\n  \n    // Reset the uploaded image preview\n    setUploadedImage(null);\n  \n    // Close the modal\n    setIsImageUploadModalOpen(false);\n  \n    alert(`Image for mood \"${mood}\" saved successfully!`);\n  };  \n\n  const [customPlaylists, setCustomPlaylists] = useState({\n    Anger: \"\",\n    Neutral: \"\",\n    Fear: \"\",\n    Sadness: \"\",\n    Surprise: \"\",\n    Happiness: \"\",\n  });  \n\n  const handleSaveCustomPlaylist = (mood, link) => {\n    if (mood === \"Background Music\") {\n      setBackgroundMusic(link); // Update the background music\n      localStorage.setItem(\"backgroundMusic\", link); // Save to LocalStorage for persistence\n    } else {\n      setCustomPlaylists((prevPlaylists) => ({\n        ...prevPlaylists,\n        [mood]: link,\n      }));\n      localStorage.setItem(\n        \"customPlaylists\",\n        JSON.stringify({\n          ...customPlaylists,\n          [mood]: link,\n        })\n      );\n    }\n    setIsPlaylistModalOpen(false); // Close modal\n    setYoutubeLink(\"\"); // Clear input\n  };  \n\n  const checkForGoodMemories = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const foundHappyDays = last14Days.filter((date) => {\n      const entry = diaryEntries[date];\n      return entry && entry.mood >= 85; // Check for happiness range\n    });\n    setHappyDays(foundHappyDays);\n  }, [dateList, diaryEntries]);\n  \n  const handleMoodChange = (newMood) => {\n    setMood((prevMood) => {\n      if (newMood === 100 && prevMood === 100) {\n        return 99.9; // Temporarily change the state to force a re-render\n      }\n      return newMood;\n    });  \n  \n    // Check if the newMood corresponds to \"fear\" (34-50) or \"sadness\" (51-67)\n    if ((newMood >= 34 && newMood <= 50) || (newMood >= 51 && newMood <= 67)) {\n      // Check for past happy memories when selecting fear or sadness\n      const last14Days = dateList.slice(0, 14);\n      const foundHappyDays = last14Days.filter((date) => {\n        const entry = diaryEntries[date];\n        return entry && entry.mood >= 85; // Check if the mood is \"happy\"\n      });\n  \n      if (foundHappyDays.length > 0) {\n        setHappyDays(foundHappyDays); // Update state with happy days\n        setIsReviewModalOpen(true); // Open the review modal\n      } else {\n        setIsReviewModalOpen(false); // Close the modal if no happy days are found\n      }\n    } else {\n      setIsReviewModalOpen(false); // Ensure the modal is closed for other mood selections\n    }\n  };  \n  \n  const handleLanguageSelect = (languageCode) => {\n    //setSelectedLanguage(languageCode);\n    setIsLanguageModalOpen(false); // Close modal\n    startSpeechRecognition(languageCode); // Start speech-to-text with the selected language\n  };\n\n  const handleOpenReviewModal = () => {\n    checkForGoodMemories();\n    setIsReviewModalOpen(true);\n  };\n\n  const handleSelectDate = (date) => {\n    setSelectedDate(date);\n    setIsReviewModalOpen(false);\n  };\n\n  useEffect(() => {\n    if ((mood >= 34 && mood <= 50) || (mood >= 51 && mood <= 67)) {\n      handleReviewMemories();\n    }\n  }, [mood]);\n  \n  // Wrap updateMoodAnalysis in useCallback\n  const updateMoodAnalysis = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate\n      ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24))\n      : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date());\n    }\n  }, [dateList, diaryEntries, lastModalShowDate]);\n\n  useEffect(() => {\n    // Load YouTube iframe API\n    const tag = document.createElement(\"script\");\n    tag.src = \"https://www.youtube.com/iframe_api\";\n    const firstScriptTag = document.getElementsByTagName(\"script\")[0];\n    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n  \n    // Initialize YouTube player\n    window.onYouTubeIframeAPIReady = () => {\n      const player = new window.YT.Player(\"background-music-player\", {\n        height: \"0\", // Hidden\n        width: \"0\",  // Hidden\n        videoId: getYouTubeVideoId(backgroundMusic), // Load default or custom background music\n        events: {\n          onReady: (event) => setYoutubePlayer(event.target), // Save player instance\n        },\n      });\n    };\n  \n    // Update YouTube player when `backgroundMusic` changes\n    if (youtubePlayer && backgroundMusic) {\n      youtubePlayer.loadVideoById(getYouTubeVideoId(backgroundMusic)); // Load new video ID\n    }\n  }, [backgroundMusic, youtubePlayer]); // Dependencies: `backgroundMusic` and `youtubePlayer`\n  \n  useEffect(() => {\n    const savedBackgroundMusic = localStorage.getItem(\"backgroundMusic\");\n    if (savedBackgroundMusic) {\n      setBackgroundMusic(savedBackgroundMusic); // Load saved background music\n    }\n  }, []);  \n\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries, updateMoodAnalysis]);\n\n  useEffect(() => {\n    const moodIndex = Math.min(\n      Math.floor((mood / 100) * moodLabels.length),\n      moodLabels.length - 1 // Stay within bounds\n    );\n    const moodLabel = moodLabels[moodIndex] || \"Neutral\"; // Fallback mood\n  \n    const defaultPlaylists = {\n      Anger: \"https://youtu.be/FLTchCiC0T0?si=_LEx70RIBrG3HC_Z\",\n      Neutral: \"https://youtu.be/pTweN7F2PFA?si=5v6Ney7A9MTtJ086\",\n      Fear: \"https://www.youtube.com/watch?v=0qanF-91aJo\",\n      Sadness: \"https://youtu.be/FFlPgTPvRJc?si=9SzqK2Vf7KaeAsFk\",\n      Surprise: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\",\n      Happiness: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\",\n    };\n  \n    const playlistUrl = customPlaylists[moodLabel] || defaultPlaylists[moodLabel];\n  \n    setSelectedMusic({\n      title: `${moodLabel} Playlist`,\n      playlistUrl,\n    });\n  }, [mood, customPlaylists]);\n\n  useEffect(() => {\n    const savedImages = localStorage.getItem(\"customMoodImages\");\n    if (savedImages) {\n      setCustomMoodImages(JSON.parse(savedImages));\n    }\n  }, []);  \n  \n  useEffect(() => {\n    if (!isImageUploadModalOpen) {\n      setUploadedImage(null); // Reset preview when modal is closed\n    }\n  }, [isImageUploadModalOpen]);  \n\n  useEffect(() => {\n    // Save diary entries to LocalStorage\n    localStorage.setItem('diaryEntries', JSON.stringify(diaryEntries));\n  }, [diaryEntries]);\n  \n  useEffect(() => {\n    // Save mood analysis to LocalStorage\n    localStorage.setItem('moodAnalysis', JSON.stringify(moodAnalysis));\n  }, [moodAnalysis]);\n  \n  useEffect(() => {\n    // Save custom playlists to LocalStorage\n    localStorage.setItem('customPlaylists', JSON.stringify(customPlaylists));\n  }, [customPlaylists]);  \n\n  useEffect(() => {\n    // Load diary entries from LocalStorage\n    const savedDiaryEntries = localStorage.getItem('diaryEntries');\n    if (savedDiaryEntries) {\n      setDiaryEntries(JSON.parse(savedDiaryEntries));\n    }\n  \n    // Load mood analysis from LocalStorage\n    const savedMoodAnalysis = localStorage.getItem('moodAnalysis');\n    if (savedMoodAnalysis) {\n      setMoodAnalysis(JSON.parse(savedMoodAnalysis));\n    }\n  \n    // Load custom playlists from LocalStorage\n    const savedPlaylists = localStorage.getItem('customPlaylists');\n    if (savedPlaylists) {\n      setCustomPlaylists(JSON.parse(savedPlaylists));\n    }\n  }, []); // Run once on component mount\n  \n  useEffect(() => {\n    const cat = document.querySelector(\".cat\");\n    const adjustSpeed = () => {\n      cat.style.animationDuration = `${Math.random() * 3 + 3}s`; // Randomize speed\n    };\n    cat.addEventListener(\"animationiteration\", adjustSpeed); // Change speed on each loop\n    return () => {\n      cat.removeEventListener(\"animationiteration\", adjustSpeed);\n    };\n  }, []);  \n\n  useEffect(() => {\n    // Save selected date\n    localStorage.setItem('selectedDate', selectedDate);\n  }, [selectedDate]);\n  \n  useEffect(() => {\n    // Load selected date\n    const savedSelectedDate = localStorage.getItem('selectedDate');\n    if (savedSelectedDate) {\n      setSelectedDate(savedSelectedDate);\n    }\n  }, []);  \n\n  const FAQModal = ({ onClose }) => (\n    <div className=\"faq-modal\">\n      <h3>Frequently Asked Questions</h3>\n      <ul>\n        <li>\n          <span>Q1: What is this app about?</span>\n          <p>This app allows users to document their daily moods...</p>\n        </li>\n        {/* Other FAQ items */}\n      </ul>\n      <hr className=\"faq-divider\" />\n      <div className=\"author-info\">\n        <h4>About the Author</h4>\n        <p>\n          Created by: <strong>Your Name</strong>\n        </p>\n        <p>\n          Email: <a href=\"mailto:your.email@example.com\">your.email@example.com</a>\n        </p>\n      </div>\n      <div className=\"report-issue\">\n        <h4>Report an Issue</h4>\n        <p>\n          Found a problem? Submit an issue on our{\" \"}\n          <a href=\"https://github.com/your-repo/issues\" target=\"_blank\" rel=\"noopener noreferrer\">\n            GitHub Issues Page\n          </a>.\n        </p>\n      </div>\n      <button onClick={onClose}>Close</button> {/* Calls the onClose function */}\n    </div>\n  );  \n\n  const handleCloseFAQModal = () => {\n    setIsFAQModalOpen(false);\n  };\n\n  const handleClear = () => {\n    if (activeInputMode === 'typing') {\n      setPrompt('');\n    } else if (activeInputMode === 'speech') {\n      setSpeechResult('');\n    }\n  };\n\n  const handleCloseModal = () => {\n    setUploadedImage(null); // Clear the preview\n    setIsImageUploadModalOpen(false); // Close the modal\n  };  \n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n        drawing: savedDrawing,\n        speechResult: speechResult,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n    setSavedDrawing(diaryEntries[date]?.drawing || null);\n    setSpeechResult(diaryEntries[date]?.speechResult || ''); \n  };\n\n  const handleEnter = () => {\n    const image = getRandomImageForMood(mood, customMoodImages);\n    setImageUrl(image);\n    if (activeInputMode === 'speech') {\n      if (isRecording) {\n        stopSpeechRecognition();\n        setDiaryEntries((prevEntries) => ({\n          ...prevEntries,\n          [selectedDate]: {\n            ...prevEntries[selectedDate],\n            speechResult: speechResult, // Save speech result for the selected date\n          },\n        }));\n        alert('Recording stopped and entry saved successfully!');\n      } else {\n        startSpeechRecognition();\n        alert('Recording started...');\n      }\n    } else {\n      const image = getRandomImageForMood(mood, customMoodImages); // Pass customMoodImages\n      setImageUrl(image);\n  \n      setDiaryEntries((prevEntries) => ({\n        ...prevEntries,\n        [selectedDate]: {\n          description: prompt,\n          mood: mood,\n          imageUrl: image,\n          speechResult: speechResult,\n        },\n      }));\n      alert('Entry saved successfully!');\n    }\n  };\n  \n\n  const handleInputModeChange = (mode) => {\n    setActiveInputMode(mode);\n    if (isRecording) stopSpeechRecognition();\n    setActiveInputMode(mode);\n    if (mode === 'speech') setIsLanguageModalOpen(true); \n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      setIsLanguageModalOpen(true); \n      //tartSpeechRecognition();\n    } else {\n      stopSpeechRecognition();\n      //setIsSpeechOpen(false);\n    }\n\n    if (mode === 'draw') {\n      setIsDrawingModalOpen(true);\n    } else {\n      setIsDrawingModalOpen(false);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n  };\n\n  const startSpeechRecognition = (languageCode) => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = languageCode;\n    recognition.interimResults = false;\n    recognition.continuous = true;\n    recognitionRef.current = recognition;\n\n    let lastTranscript = \"\"; \n\n    recognition.onresult = (event) => {\n      let transcript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n          const result = event.results[i];\n          if (result.isFinal) {  // Append only if the result is final\n              transcript += result[0].transcript.trim();\n          }\n      }\n\n      // Avoid duplicating words by comparing with the last appended text\n      if (transcript && transcript !== lastTranscript) {\n          setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n          lastTranscript = transcript;  // Update last transcript to the new one\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.start();\n    setIsRecording(true);\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.beginPath();\n      ctx.moveTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      isDrawing.current = true;\n    }\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.lineTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      ctx.stroke();\n    }\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const dataUrl = canvas.toDataURL(); // Convert canvas to base64 image data\n      setSavedDrawing(dataUrl); // Store the image data for the selected date\n      setDiaryEntries((prevEntries) => ({\n        ...prevEntries,\n        [selectedDate]: {\n          ...prevEntries[selectedDate],\n          drawing: dataUrl,\n        },\n      }));\n      alert('Drawing saved successfully!');\n    }\n    //setIsDrawingOpen(false); // Close the drawing modal after saving\n  };\n\n  const handleReimagine = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      // Clear the entire canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  \n    // Reset the savedDrawing state to clear the drawing in the state\n    setSavedDrawing(null);\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        drawing: null,\n      },\n    }));\n    alert('The drawing has been cleared for re-imagining!');\n  };\n  \n  const confirmRemoveImage = (mood, index) => {\n    const customImages = customMoodImages[mood] || [];\n  \n    // Check if the image belongs to custom images\n    if (index < customImages.length) {\n      // Remove from custom images\n      const updatedImages = customImages.filter((_, i) => i !== index);\n      setCustomMoodImages((prevImages) => ({\n        ...prevImages,\n        [mood]: updatedImages,\n      }));\n  \n      // Update LocalStorage\n      localStorage.setItem(\n        \"customMoodImages\",\n        JSON.stringify({\n          ...customMoodImages,\n          [mood]: updatedImages,\n        })\n      );\n    } else {\n      // For hardcoded images, no action is needed as they are not dynamically updated\n      alert(\"Hardcoded images cannot be removed dynamically!\");\n    }\n  };  \n\n  const handleRemoveImage = (mood) => {\n    setMoodToRemoveImages(mood); // Set the selected mood\n    setIsRemoveImageModalOpen(true); // Open the Remove Image modal\n  \n    // Update LocalStorage (if needed)\n    localStorage.setItem(\n      \"customMoodImages\",\n      JSON.stringify({\n        ...customMoodImages,\n        [mood]: null,\n      })\n    );\n  };  \n\n  const handleResetToDefault = () => {\n    const confirmed = window.confirm(\"Are you sure you want to reset all custom images?\");\n    if (!confirmed) return;\n  \n    // Reset all custom images to empty arrays\n    setCustomMoodImages({\n      Anger: [],\n      Neutral: [],\n      Fear: [],\n      Sadness: [],\n      Surprise: [],\n      Happiness: [],\n    });\n  \n    // Remove from LocalStorage\n    localStorage.removeItem(\"customMoodImages\");\n  };  \n\n  const handleReviewMemories = () => {\n    const last14Days = dateList.slice(0, 14);\n    const happyDays = last14Days.filter(date => {\n      const entry = diaryEntries[date];\n      return entry && entry.mood >= 85; // Assuming 85-100 is happiness\n    });\n\n    if (happyDays.length > 0) {\n      //setHappyMemories(happyDays);\n      setIsMemoryModalOpen(true);\n    }\n  };\n\n  const handleCatClick = () => {\n    // Trigger FAQ modal or functionality\n    //alert(\"Here's the FAQ!\"); // For testing\n    setIsFAQModalOpen(true); // Open the FAQ modal\n  };  \n\n  useEffect(() => {\n    if (mood < 51) { // Assuming 0-50 is sadness or fear\n      handleReviewMemories();\n    }\n  }, [mood]);\n  \n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => {\n              handleInputModeChange('draw');\n              setIsDrawingModalOpen(true);\n            }}\n          />\n        </div>\n        \n        {isLanguageModalOpen && (\n          <div className=\"language-modal\">\n            <h3>Choose Language for Speech-to-Text</h3>\n            <button onClick={() => handleLanguageSelect('en-US')}>English</button>\n            <button onClick={() => handleLanguageSelect('zh-TW')}>Taiwanese</button>\n          </div>\n        )}\n\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\" // Shared styling\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"How's your day?\"\n          />\n        )}\n\n        {activeInputMode === 'speech' && (\n          <textarea\n            className=\"description-input\" // Shared styling\n            value={speechResult}\n            readOnly // Read-only since it's updated dynamically\n            placeholder=\"Speech-to-text result...\"\n          />\n        )}\n\n        <div className=\"button-container\">\n          <button className=\"button enter-button\" onClick={handleEnter}>\n            Enter\n          </button>\n          <button className=\"button clear-button\" onClick={handleClear}>\n            Clear\n          </button>\n          <button\n            className=\"button customize-playlist-button\"\n            onClick={() => setIsPlaylistModalOpen(true)}\n          >\n            Music\n          </button>\n          <button\n            className=\"button customize-image-button\"\n            onClick={() => setIsImageUploadModalOpen(true)} // Opens the ImageUploadModal\n          >\n            Image\n          </button>\n        </div>\n        \n        <PlaylistModal\n          isOpen={isPlaylistModalOpen}\n          onClose={() => setIsPlaylistModalOpen(false)}\n          onSave={handleSaveCustomPlaylist}\n          selectedMoodForPlaylist={selectedMoodForPlaylist}\n          setSelectedMoodForPlaylist={setSelectedMoodForPlaylist}\n          youtubeLink={youtubeLink}\n          setYoutubeLink={setYoutubeLink}\n        />\n\n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img\n              src={imageUrl}\n              alt=\"Mood\"\n              className=\"generated-image\"\n            />\n          ) : (\n            <div className=\"placeholder\">images for your mood</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-emojis\">\n            {moodEmojis.map((emoji, index) => (\n              <span key={index} className=\"mood-emoji\">\n                {emoji}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => handleMoodChange(Number(e.target.value))}\n          />\n        </div>\n\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <div className=\"mood-analysis\">\n          <h3>Past 14 Days Mood Analysis</h3>\n          <ul>\n            {Object.keys(moodAnalysis).map((mood, index) => (\n              <li key={mood}>\n                {moodLabels[index]} {moodEmojis[index]}: {moodAnalysis[mood]}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n      </div>\n\n      {/* Add DrawingModal here */}\n      <DrawingModal\n        isOpen={isDrawingModalOpen}\n        onClose={() => setIsDrawingModalOpen(false)}\n        canvasRef={canvasRef}\n        handleCanvasMouseDown={handleCanvasMouseDown}\n        handleCanvasMouseMove={handleCanvasMouseMove}\n        handleCanvasMouseUp={handleCanvasMouseUp}\n        saveDrawing={saveDrawing}\n        reimagineDrawing={handleReimagine}\n        savedDrawing={savedDrawing} // Pass the saved drawing to the modal\n      />\n\n      {isReviewModalOpen && (\n        <ReviewMemoriesModal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n          happyDays={happyDays}\n          onSelectDate={handleSelectDate}\n        />\n      )}\n\n      <ImageUploadModal\n        isOpen={isImageUploadModalOpen}\n        onClose={handleCloseModal}\n        onSave={handleSaveCustomImage}\n        onRemoveImage={handleRemoveImage}\n        onResetToDefault={handleResetToDefault}\n        selectedMoodForImage={selectedMoodForImage}\n        setSelectedMoodForImage={setSelectedMoodForImage}\n        uploadedImage={uploadedImage} // Pass uploadedImage as a prop\n        setUploadedImage={setUploadedImage} // Pass setUploadedImage as a prop\n        selectedMoodForPlaylist={selectedMoodForPlaylist} // Pass as prop\n        setSelectedMoodForPlaylist={setSelectedMoodForPlaylist} // Pass as prop\n      />\n\n      {isRemoveImageModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <h3>Select Image to Remove for {moodToRemoveImages}</h3>\n            <div className=\"image-grid\">\n              {[\n                // Combine custom images and hardcoded images\n                ...(customMoodImages[moodToRemoveImages] || []),\n                ...Array.from(\n                  { length: imageCounts[moodToRemoveImages] || 0 },\n                  (_, index) =>\n                    `${process.env.PUBLIC_URL}/${imageDirectories[moodToRemoveImages]}/image${index + 1}.jpg`\n                ),\n              ].map((image, index) => (\n                <div key={index} className=\"image-item\">\n                  <img src={image} alt={`Image ${index + 1}`} />\n                  <button\n                    className=\"remove-btn\"\n                    onClick={() => confirmRemoveImage(moodToRemoveImages, index)}\n                  >\n                    Remove\n                  </button>\n                </div>\n              ))}\n            </div>\n            <button\n              className=\"button cancel-button\"\n              onClick={() => setIsRemoveImageModalOpen(false)}\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      )}\n\n      <div className=\"top-right-controls\">\n        <button onClick={toggleBackgroundMusic} className=\"music-toggle-button\">\n          {isBackgroundMusicPlaying ? (\n            <span>🎵 Pause Music</span>\n          ) : (\n            <span>🎶 Play Music</span>\n          )}\n        </button>\n      </div>\n\n      <div id=\"background-music-player\"></div>\n      <div className=\"cat-animation\" onClick={handleCatClick}> \n        <img src={catGif} alt=\"Running Cat\" className=\"cat\" />\n      </div>\n      \n      \n      {isFAQModalOpen && (\n        <div className=\"modal-overlay\">\n          <div className=\"faq-modal\">\n            <h3>Frequently Asked Questions</h3>\n            <ul>\n              <li>\n                <span>Q1: What is this app about?</span>\n                <p>This app allows users to document their daily moods, add visual elements like drawings or images, and listen to mood-specific playlists.</p>\n              </li>\n              <li>\n                <span>Q2: How do I record my mood?</span>\n                <p>You can type in your diary entry, use voice-to-text functionality, or upload a drawing to reflect your mood.</p>\n              </li>\n              <li>\n                <span>Q3: How do I customize playlists?</span>\n                <p>Use the \"Music\" button to add a YouTube link for a mood-specific playlist or background music.</p>\n              </li>\n              <li>\n                <span>Q4: How do I save images for moods?</span>\n                <p>Use the \"Image\" button to upload and save custom images for each mood.</p>\n              </li>\n              <li>\n                <span>Q5: How do I switch between input modes?</span>\n                <p>Click the icons at the top (keyboard, microphone, or pen) to type, speak, or draw your mood.</p>\n              </li>\n              <li>\n                <span>Q6: What happens when I click the cat GIF?</span>\n                <p>Clicking the cat opens this FAQ to help you better understand how to use the app.</p>\n              </li>\n            </ul>\n            <hr className=\"faq-divider\" />\n            <div className=\"author-info\">\n              <h4>About the Author</h4>\n              <p>\n                Created by: <strong>Stanley Chueh</strong>\n              </p>\n              <p>\n                Email: <a href=\"mailto:stanleychueh28@gmail.com\">stanleychueh28@gmail.com</a>\n              </p>\n              <p>\n                For more information, visit my{\" \"}\n                <a href=\"https://github.com/StanleyChueh/Moodify-Journal\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  GitHub Repository\n                </a>.\n              </p>\n            </div>\n            <div className=\"report-issue\">\n              <h4>Report an Issue</h4>\n              <p>\n                Found a problem? Please let me know by submitting an issue on my{\" \"}\n                <a href=\"https://github.com/StanleyChueh/Moodify-Journal/issues\" target=\"_blank\" rel=\"noopener noreferrer\">\n                  GitHub Issues Page\n                </a>.\n              </p>\n            </div>\n            <button className=\"cancel-button\" onClick={handleCloseFAQModal}>\n              Close\n            </button>\n          </div>\n        </div>\n      )}\n\n\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}