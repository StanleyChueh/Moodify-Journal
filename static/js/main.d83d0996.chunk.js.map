{"version":3,"sources":["AlertModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","moodLabels","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","reduce","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","setMood","setImageUrl","selectedMusic","setSelectedMusic","moodAnalysis","setMoodAnalysis","acc","label","isModalOpen","setIsModalOpen","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","recognitionRef","useRef","canvasRef","isDrawing","handleInputModeChange","mode","startSpeechRecognition","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","prevPrompt","onerror","console","error","onend","log","start","current","stop","useEffect","currentMusic","moodRange","title","playlistUrl","find","music","map","index","key","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","name","handleEnter","image","moodValue","moodIndex","Math","floor","moodLabel","imageCount","random","getRandomImageForMood","src","alt","type","min","max","Object","keys","ref","onMouseDown","ctx","getContext","beginPath","moveTo","nativeEvent","offsetX","offsetY","onMouseMove","lineTo","stroke","onMouseUp","handleCanvasMouseUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d83d0996.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa'; // Import icons\nimport './App.css';\nimport AlertModal from './AlertModal';\n\n// Updated mood labels (including \"Neutral\")\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\n\n// Image directories and count of images for different moods (public directory)\nconst imageDirectories = {\n    \"Anger\": \"images/Anger\",\n    \"Neutral\": \"images/Neutral\",\n    \"Fear\": \"images/Fear\",\n    \"Sadness\": \"images/Sadness\",\n    \"Surprise\": \"images/Surprise\",\n    \"Happiness\": \"images/Happiness\"\n};\n\n// Image count for each mood folder\nconst imageCounts = {\n    \"Anger\": 10,\n    \"Neutral\": 3,\n    \"Fear\": 8,\n    \"Sadness\": 20,\n    \"Surprise\": 8,\n    \"Happiness\": 11\n};\n\n// Get a random image for the current mood\nfunction getRandomImageForMood(moodValue) {\n    let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n    moodIndex = moodValue === 100 ? moodLabels.length - 1 : moodIndex >= moodLabels.length ? moodLabels.length - 1 : moodIndex;\n    \n    const moodLabel = moodLabels[moodIndex];\n    const directory = imageDirectories[moodLabel];\n    const imageCount = imageCounts[moodLabel] || 1;\n    const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n    return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Extract YouTube video ID from the URL\nfunction getYouTubeVideoId(url) {\n    const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#\\&\\?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[1].length === 11) ? match[1] : null;\n}\n\nfunction App() {\n    const dateList = generateDateList();\n    const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n    const [selectedDate, setSelectedDate] = useState(dateList[0]);\n    const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n    const [mood, setMood] = useState(25);  // Set initial mood to Neutral\n    const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n    const [selectedMusic, setSelectedMusic] = useState(null);\n    const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [activeInputMode, setActiveInputMode] = useState('typing'); // Track input mode\n    const [isDrawingOpen, setIsDrawingOpen] = useState(false); // For drawing overlay\n    const recognitionRef = useRef(null); // For speech-to-text\n    const canvasRef = useRef(null); // For drawing\n    const isDrawing = useRef(false); // Track drawing state\n\n    // Generate dates from today and the past 30 days\n    function generateDateList() {\n        const today = new Date();\n        const dateList = [];\n        for (let i = 0; i <= 30; i++) {\n            const date = new Date(today);\n            date.setDate(today.getDate() - i);\n            const dateString = date.toISOString().split('T')[0];\n            dateList.push(dateString);\n        }\n        return dateList;\n    }\n\n    // Initialize diary entries with generated dates\n    function initializeDiaryEntries(dateList) {\n        return dateList.reduce((entries, date) => {\n            entries[date] = { description: '', mood: 25, imageUrl: null };\n            return entries;\n        }, {});\n    }\n\n    // Initialize mood analysis count\n    function initializeMoodAnalysis() {\n        return moodLabels.reduce((acc, label) => {\n            acc[label] = 0;\n            return acc;\n        }, {});\n    }\n\n    // Handle speech-to-text functionality\n    const startSpeechRecognition = () => {\n        if (!('webkitSpeechRecognition' in window)) {\n            alert('Speech recognition is not supported in this browser.');\n            return;\n        }\n\n        const recognition = new window.webkitSpeechRecognition();\n        recognition.lang = 'en-US';\n        recognition.interimResults = false;\n\n        recognition.onresult = (event) => {\n            const transcript = event.results[0][0].transcript;\n            setPrompt((prevPrompt) => prevPrompt + ' ' + transcript);\n        };\n\n        recognition.onerror = (event) => {\n            console.error('Speech recognition error:', event.error);\n        };\n\n        recognition.onend = () => {\n            console.log('Speech recognition ended.');\n        };\n\n        recognition.start();\n        recognitionRef.current = recognition;\n    };\n\n    const stopSpeechRecognition = () => {\n        if (recognitionRef.current) {\n            recognitionRef.current.stop();\n        }\n    };\n\n    // Handle drawing functionality\n    const handleCanvasMouseDown = (e) => {\n        const ctx = canvasRef.current.getContext('2d');\n        ctx.beginPath();\n        ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n        isDrawing.current = true;\n    };\n\n    const handleCanvasMouseMove = (e) => {\n        if (!isDrawing.current) return;\n        const ctx = canvasRef.current.getContext('2d');\n        ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n        ctx.stroke();\n    };\n\n    const handleCanvasMouseUp = () => {\n        isDrawing.current = false;\n    };\n\n    // Handle input mode change\n    const handleInputModeChange = (mode) => {\n        setActiveInputMode(mode);\n        if (mode === 'speech') {\n            startSpeechRecognition();\n        } else {\n            stopSpeechRecognition();\n        }\n        if (mode === 'draw') {\n            setIsDrawingOpen(true);\n        }\n    };\n\n    // Handle switching between dates\n    const handleDateClick = (date) => {\n        // Save current data before switching\n        setDiaryEntries((prevEntries) => ({\n            ...prevEntries,\n            [selectedDate]: {\n                description: prompt,\n                mood: mood,\n                imageUrl: imageUrl,\n            },\n        }));\n\n        // Set new date data\n        setSelectedDate(date);\n        setPrompt(diaryEntries[date].description);\n        setMood(diaryEntries[date].mood);\n        setImageUrl(diaryEntries[date].imageUrl);\n    };\n\n    // Get music suggestion based on mood\n    useEffect(() => {\n        const musicSuggestions = [\n            { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n            { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n            { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n            { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n            { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n            { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n        ];\n\n        const currentMusic = musicSuggestions.find(\n            (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n        );\n        setSelectedMusic(currentMusic);\n    }, [mood]);\n\n    // Handle \"Enter\" action\n    const handleEnter = () => {\n        const image = getRandomImageForMood(mood);\n        setImageUrl(image);\n\n        // Save current diary entry\n        setDiaryEntries((prevEntries) => ({\n            ...prevEntries,\n            [selectedDate]: {\n                description: prompt,\n                mood: mood,\n                imageUrl: image,\n            },\n        }));\n        alert('Entry saved successfully!');\n    };\n\n    return (\n        <div className=\"app-layout\">\n            {/* Sidebar for Diary Entries */}\n            <div className=\"sidebar\">\n                <h2 className=\"sidebar-title\">Diary AI</h2>\n                <ul className=\"diary-list\">\n                    {dateList.map((date, index) => (\n                        <li\n                            key={date}\n                            className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n                            onClick={() => handleDateClick(date)}\n                        >\n                            {index === 0 ? 'Today' : date}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            {/* Main Content Area */}\n            <div className=\"main-content\">\n                <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n                <div className=\"input-icons\">\n                    <FaKeyboard \n                        className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`} \n                        title=\"Type\" \n                        onClick={() => handleInputModeChange('typing')} \n                    />\n                    <FaMicrophone \n                        className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`} \n                        title=\"Voice to Text\" \n                        onClick={() => handleInputModeChange('speech')} \n                    />\n                    <FaPenFancy \n                        className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`} \n                        title=\"Handwriting\" \n                        onClick={() => handleInputModeChange('draw')} \n                    />\n                </div>\n                <textarea\n                    className=\"description-input\"\n                    value={prompt}\n                    onChange={(e) => setPrompt(e.target.value)}\n                    placeholder=\"Write your description here...\"\n                    name=\"description\"\n                />\n                <button \n                    className=\"generate-button\" \n                    name=\"generate-button\"\n                    onClick={handleEnter}\n                >\n                    Enter\n                </button>\n\n                {/* Image Container */}\n                <div className=\"image-display\">\n                    {imageUrl ? (\n                        <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n                    ) : (\n                        <div className=\"placeholder\">Your image will appear here</div>\n                    )}\n                </div>\n\n                {/* Mood Slider with Emotion Labels */}\n                <div className=\"mood-slider-container\">\n                    <div className=\"mood-labels\">\n                        {moodLabels.map((label, index) => (\n                            <span key={index} className=\"mood-label\">\n                                {label}\n                            </span>\n                        ))}\n                    </div>\n                    <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={mood}\n                        className=\"mood-slider\"\n                        onChange={(e) => setMood(e.target.value)}\n                    />\n                </div>\n\n                {/* YouTube Music Link and Thumbnail */}\n                {selectedMusic && (\n                    <div className=\"music-suggestion\">\n                        <h3>Suggested Playlist: {selectedMusic.title}</h3>\n                        <a\n                            href={selectedMusic.playlistUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <img\n                                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                                alt={`${selectedMusic.title} playlist`}\n                                className=\"music-thumbnail\"\n                            />\n                        </a>\n                    </div>\n                )}\n\n                {/* Mood Analysis Box */}\n                <div className=\"mood-analysis\">\n                    <h3>Past 14 Days Mood Analysis</h3>\n                    <ul>\n                        {Object.keys(moodAnalysis).map((mood) => (\n                            <li key={mood}>\n                                {mood}: {moodAnalysis[mood]}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n\n                {/* Alert Modal for Help */}\n                <AlertModal\n                    isOpen={isModalOpen}\n                    onClose={() => setIsModalOpen(false)}\n                    message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n                    link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n                />\n\n                {/* Drawing Overlay */}\n                {isDrawingOpen && (\n                    <div className=\"drawing-overlay\">\n                        <canvas\n                            ref={canvasRef}\n                            className=\"drawing-canvas\"\n                            onMouseDown={handleCanvasMouseDown}\n                            onMouseMove={handleCanvasMouseMove}\n                            onMouseUp={handleCanvasMouseUp}\n                        />\n                        <button className=\"close-drawing\" onClick={() => setIsDrawingOpen(false)}>Done</button>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}