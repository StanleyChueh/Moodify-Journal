{"version":3,"sources":["AlertModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","moodLabels","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","reduce","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","moodAnalysis","setMoodAnalysis","initializeMoodAnalysis","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","isSpeechOpen","setIsSpeechOpen","isRecording","setIsRecording","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","lastModalShowDate","setLastModalShowDate","drawingDataUrl","setDrawingDataUrl","recognitionRef","useRef","canvasRef","isDrawing","acc","label","useEffect","updateMoodAnalysis","last14Days","slice","newMoodAnalysis","sadnessCount","fearCount","forEach","entry","moodIndex","Math","floor","moodLabel","daysSinceLastModal","currentMusic","moodRange","title","playlistUrl","find","music","handleInputModeChange","mode","clearResults","map","index","key","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","src","alt","handleEnter","image","moodValue","min","imageCount","random","getRandomImageForMood","drawing","speech","alert","type","max","Number","startSpeechRecognition","window","recognition","webkitSpeechRecognition","lang","interimResults","continuous","onresult","event","transcript","results","prevResult","onerror","console","error","current","start","stopSpeechRecognition","stop","ref","width","height","onMouseDown","ctx","getContext","beginPath","moveTo","nativeEvent","offsetX","offsetY","onMouseMove","lineTo","stroke","onMouseUp","handleCanvasMouseUp","saveDrawing","dataUrl","toDataURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f66aa6f.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\n\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\n\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\n\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\nfunction getRandomImageForMood(moodValue) {\n  let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n  moodIndex = moodValue === 100 ? moodLabels.length - 1 : Math.min(moodIndex, moodLabels.length - 1);\n  \n  const moodLabel = moodLabels[moodIndex];\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1;\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#\\&\\?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState('');\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [isSpeechOpen, setIsSpeechOpen] = useState(false);\n  const [isRecording, setIsRecording] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [lastModalShowDate, setLastModalShowDate] = useState(null);\n  const [drawingDataUrl, setDrawingDataUrl] = useState(null);\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n\n  function generateDateList() {\n    const today = new Date();\n    const dateList = [];\n    for (let i = 0; i <= 30; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateString = date.toISOString().split('T')[0];\n      dateList.push(dateString);\n    }\n    return dateList;\n  }\n\n  function initializeDiaryEntries(dateList) {\n    return dateList.reduce((entries, date) => {\n      entries[date] = { description: '', mood: 25, imageUrl: null };\n      return entries;\n    }, {});\n  }\n\n  function initializeMoodAnalysis() {\n    return moodLabels.reduce((acc, label) => {\n      acc[label] = 0;\n      return acc;\n    }, {});\n  }\n\n  const updateMoodAnalysis = () => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24)) : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date());\n    }\n  };\n\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries]);\n\n  useEffect(() => {\n    const musicSuggestions = [\n      { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n      { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n      { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n      { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n      { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n      { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n    ];\n\n    const currentMusic = musicSuggestions.find(\n      (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n    );\n    setSelectedMusic(currentMusic);\n  }, [mood]);\n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n  };\n\n  const handleEnter = () => {\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n        drawing: drawingDataUrl,\n        speech: speechResult,\n      },\n    }));\n\n    alert('Entry saved successfully!');\n  };\n\n  const handleInputModeChange = (mode) => {\n    if (activeInputMode !== mode) {\n      clearResults();\n    }\n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      setIsSpeechOpen(true);\n    } else if (mode === 'draw') {\n      setIsDrawingOpen(true);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n    setDrawingDataUrl(null);\n  };\n\n  const startSpeechRecognition = () => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = true;\n    recognition.continuous = true;\n    setIsRecording(true);\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[event.results.length - 1][0].transcript;\n      setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognitionRef.current = recognition;\n    recognition.start();\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current && isRecording) {\n      recognitionRef.current.stop();\n      setIsRecording(false);\n    }\n    setIsSpeechOpen(false);\n  };\n\n  // Drawing functionality\n  const handleCanvasMouseDown = (e) => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    isDrawing.current = true;\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    ctx.stroke();\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    const dataUrl = canvas.toDataURL();\n    setDrawingDataUrl(dataUrl);\n    setIsDrawingOpen(false);\n  };\n\n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => handleInputModeChange('draw')}\n          />\n        </div>\n\n        {/* Typing Block */}\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Write your description here...\"\n          />\n        )}\n\n        {/* Speech-to-Text Block */}\n        {activeInputMode === 'speech' && speechResult && (\n          <div className=\"speech-result\">\n            <h3>Speech-to-Text Result</h3>\n            <p>{speechResult}</p>\n          </div>\n        )}\n\n        {/* Drawing Block */}\n        {activeInputMode === 'draw' && drawingDataUrl && (\n          <div className=\"drawing-result\">\n            <h3>Drawing Result</h3>\n            <img src={drawingDataUrl} alt=\"Drawing\" className=\"drawing-preview\" />\n          </div>\n        )}\n\n        <button className=\"generate-button\" onClick={handleEnter}>\n          Enter\n        </button>\n\n        {/* Image Display */}\n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        {/* Mood Slider */}\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-labels\">\n            {moodLabels.map((label) => (\n              <span key={label} className=\"mood-label\">\n                {label}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => setMood(Number(e.target.value))}\n          />\n        </div>\n\n        {/* Music Suggestion */}\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist: {selectedMusic.title}</h3>\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n\n        {/* Speech-to-text Modal */}\n        {isSpeechOpen && (\n          <div className=\"popup-overlay\">\n            <div className=\"popup-content\">\n              <h2>Speak now...</h2>\n              <button onClick={startSpeechRecognition}>Start</button>\n              <button onClick={stopSpeechRecognition}>Done</button>\n            </div>\n          </div>\n        )}\n\n        {/* Drawing Modal */}\n        {isDrawingOpen && (\n          <div className=\"popup-overlay\">\n            <div className=\"popup-content\">\n              <canvas\n                ref={canvasRef}\n                className=\"drawing-canvas\"\n                width={1600} // Increased canvas width\n                height={1000} // Increased canvas height\n                onMouseDown={handleCanvasMouseDown}\n                onMouseMove={handleCanvasMouseMove}\n                onMouseUp={handleCanvasMouseUp}\n              />\n              <button onClick={saveDrawing}>Done</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}