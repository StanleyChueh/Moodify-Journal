{"version":3,"sources":["AlertModal.js","DrawingModal.js","ReviewMemoriesModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","DrawingModal","canvasRef","handleCanvasMouseDown","handleCanvasMouseMove","handleCanvasMouseUp","saveDrawing","reimagineDrawing","savedDrawing","selectedColor","setSelectedColor","useState","useEffect","canvas","current","ctx","getContext","img","Image","src","onload","clearRect","width","height","drawImage","ref","onMouseDown","onMouseMove","onMouseUp","style","border","map","color","index","key","backgroundColor","margin","cursor","strokeStyle","handleColorChange","ReviewMemoriesModal","happyDays","onSelectDate","length","date","moodLabels","moodEmojis","imageDirectories","imageCounts","getYouTubeVideoId","url","match","initializeMoodAnalysis","reduce","acc","label","App","dateList","today","Date","i","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","speechResult","setSpeechResult","setMood","setImageUrl","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","isSpeechOpen","setIsSpeechOpen","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","moodAnalysis","setMoodAnalysis","lastModalShowDate","setLastModalShowDate","isDrawingModalOpen","setIsDrawingModalOpen","setSavedDrawing","drawing","recognitionRef","useRef","isDrawing","isRecording","setIsRecording","selectedLanguage","setSelectedLanguage","isLanguageModalOpen","setIsLanguageModalOpen","happyMemories","setHappyMemories","isMemoryModalOpen","setIsMemoryModalOpen","isReviewModalOpen","setIsReviewModalOpen","setHappyDays","handleLanguageSelect","useCallback","foundHappyDays","slice","filter","entry","languageCode","startSpeechRecognition","handleReviewMemories","updateMoodAnalysis","last14Days","newMoodAnalysis","sadnessCount","fearCount","forEach","moodIndex","Math","floor","moodLabel","daysSinceLastModal","currentMusic","moodRange","title","playlistUrl","find","music","handleInputModeChange","mode","stopSpeechRecognition","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","continuous","lastTranscript","onresult","event","transcript","resultIndex","results","result","isFinal","trim","prevResult","onerror","console","error","start","stop","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","_diaryEntries$date4","_diaryEntries$date5","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","handleEnter","image","moodValue","min","imageCount","random","getRandomImageForMood","handleClear","alt","emoji","type","max","newMood","handleMoodChange","Number","Object","keys","rect","getBoundingClientRect","scaleX","scaleY","beginPath","moveTo","clientX","left","clientY","top","lineTo","stroke","dataUrl","toDataURL","handleReimagine","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be1c1e21.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useEffect, useState } from 'react';\n\nfunction DrawingModal({\n  isOpen,\n  onClose,\n  canvasRef,\n  handleCanvasMouseDown,\n  handleCanvasMouseMove,\n  handleCanvasMouseUp,\n  saveDrawing,\n  reimagineDrawing,\n  savedDrawing,\n}) {\n  const [selectedColor, setSelectedColor] = useState('#000000'); // Default color is black\n\n  const colors = ['#000000', '#FF0000', '#00FF00', '#0000FF', '#FFFF00', '#FFA500', '#800080', '#00FFFF', '#FFC0CB', '#8B4513']; // Added more colors\n\n  const handleColorChange = (color) => {\n    setSelectedColor(color);\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      ctx.strokeStyle = color; // Update drawing color\n    }\n  };\n\n  useEffect(() => {\n    // Load the saved drawing specific to the date if it exists\n    const canvas = canvasRef.current;\n    if (canvas && savedDrawing) {\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.src = savedDrawing;\n      img.onload = () => {\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas before loading\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height); // Load the saved image\n      };\n    } else if (canvas) {\n      // Clear the canvas if there's no saved drawing\n      const ctx = canvas.getContext('2d');\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  }, [isOpen, savedDrawing]); // Reloads when modal opens or savedDrawing changes\n\n  return (\n    <div className={`drawing-overlay ${isOpen ? 'active' : ''}`}>\n      <div className=\"drawing-modal-content\">\n        <h2>Draw Your Mood</h2>\n        <canvas\n          ref={canvasRef}\n          className=\"drawing-canvas\"\n          width=\"400\"\n          height=\"400\"\n          onMouseDown={handleCanvasMouseDown}\n          onMouseMove={handleCanvasMouseMove}\n          onMouseUp={handleCanvasMouseUp}\n          style={{ border: '1px solid #000' }}\n        />\n        <div className=\"color-palette\">\n          <h3>Select Color:</h3>\n          {colors.map((color, index) => (\n            <button\n              key={index}\n              style={{\n                backgroundColor: color,\n                width: '30px',\n                height: '30px',\n                margin: '2px',\n                border: selectedColor === color ? '2px solid #000' : '1px solid #ccc',\n                cursor: 'pointer',\n              }}\n              onClick={() => handleColorChange(color)}\n            />\n          ))}\n        </div>\n        <div className=\"drawing-buttons\">\n          <button onClick={saveDrawing}>Save</button>\n          <button onClick={reimagineDrawing}>Re-imagine</button>\n          <button onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DrawingModal;\n","import React from 'react';\n\nfunction ReviewMemoriesModal({ isOpen, onClose, happyDays, onSelectDate }) {\n  if (!isOpen || happyDays.length === 0) return null; // Do not render if no happy memories\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <h2>Cheer up🙌</h2>\n        <ul>\n          {happyDays.map((date) => (\n            <li key={date}>\n              <button onClick={() => onSelectDate(date)}>{date}</button>\n            </li>\n          ))}\n        </ul>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n}\n\nexport default ReviewMemoriesModal;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\nimport DrawingModal from './DrawingModal';\nimport ReviewMemoriesModal from './ReviewMemoriesModal';\n\n// Constants\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\nconst moodEmojis = [\"😠\", \"😐\", \"😨\", \"😢\", \"😲\", \"😊\"];\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\n// Define the function to get a random image based on mood\nfunction getRandomImageForMood(moodValue) {\n  let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n  moodIndex = moodValue === 100 ? moodLabels.length - 1 : Math.min(moodIndex, moodLabels.length - 1);\n\n  const moodLabel = moodLabels[moodIndex];\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1;\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Define the function to get YouTube video ID\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\n// Generate a list of dates for the past 30 days\nfunction generateDateList() {\n  const today = new Date();\n  const dateList = [];\n  for (let i = 0; i <= 30; i++) {\n    const date = new Date(today);\n    date.setDate(today.getDate() - i);\n    const dateString = date.toISOString().split('T')[0];\n    dateList.push(dateString);\n  }\n  return dateList;\n}\n\n// Initialize diary entries\nfunction initializeDiaryEntries(dateList) {\n  return dateList.reduce((entries, date) => {\n    entries[date] = { description: '', mood: 25, imageUrl: null };\n    return entries;\n  }, {});\n}\n\n// Initialize mood analysis\nfunction initializeMoodAnalysis() {\n  return moodLabels.reduce((acc, label) => {\n    acc[label] = 0;\n    return acc;\n  }, {});\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [speechResult, setSpeechResult] = useState(diaryEntries[dateList[0]].speechResult);\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [isSpeechOpen, setIsSpeechOpen] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [lastModalShowDate, setLastModalShowDate] = useState(null);\n  const [isDrawingModalOpen, setIsDrawingModalOpen] = useState(false);\n  const [savedDrawing, setSavedDrawing] = useState(diaryEntries[selectedDate].drawing || null);\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n  const [isRecording, setIsRecording] = useState(false); \n  const [selectedLanguage, setSelectedLanguage] = useState('en-US');\n  const [isLanguageModalOpen, setIsLanguageModalOpen] = useState(false);\n  const [happyMemories, setHappyMemories] = useState([]);\n  const [isMemoryModalOpen, setIsMemoryModalOpen] = useState(false);\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [happyDays, setHappyDays] = useState([]);\n\n  const checkForGoodMemories = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const foundHappyDays = last14Days.filter((date) => {\n      const entry = diaryEntries[date];\n      return entry && entry.mood >= 85; // Check for happiness range\n    });\n    setHappyDays(foundHappyDays);\n  }, [dateList, diaryEntries]);\n  \n  const handleMoodChange = (newMood) => {\n    setMood(newMood);\n  \n    // Check if the newMood corresponds to \"fear\" (34-50) or \"sadness\" (51-67)\n    if ((newMood >= 34 && newMood <= 50) || (newMood >= 51 && newMood <= 67)) {\n      // Check for past happy memories when selecting fear or sadness\n      const last14Days = dateList.slice(0, 14);\n      const foundHappyDays = last14Days.filter((date) => {\n        const entry = diaryEntries[date];\n        return entry && entry.mood >= 85; // Check if the mood is \"happy\"\n      });\n  \n      if (foundHappyDays.length > 0) {\n        setHappyDays(foundHappyDays); // Update state with happy days\n        setIsReviewModalOpen(true); // Open the review modal\n      } else {\n        setIsReviewModalOpen(false); // Close the modal if no happy days are found\n      }\n    } else {\n      setIsReviewModalOpen(false); // Ensure the modal is closed for other mood selections\n    }\n  };  \n  \n  const handleLanguageSelect = (languageCode) => {\n    setSelectedLanguage(languageCode);\n    setIsLanguageModalOpen(false); // Close modal\n    startSpeechRecognition(languageCode); // Start speech-to-text with the selected language\n  };\n\n  const handleOpenReviewModal = () => {\n    checkForGoodMemories();\n    setIsReviewModalOpen(true);\n  };\n\n  const handleSelectDate = (date) => {\n    setSelectedDate(date);\n    setIsReviewModalOpen(false);\n  };\n\n  useEffect(() => {\n    if ((mood >= 34 && mood <= 50) || (mood >= 51 && mood <= 67)) {\n      handleReviewMemories();\n    }\n  }, [mood]);\n  \n  // Wrap updateMoodAnalysis in useCallback\n  const updateMoodAnalysis = useCallback(() => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate\n      ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24))\n      : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date());\n    }\n  }, [dateList, diaryEntries, lastModalShowDate]);\n\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries, updateMoodAnalysis]);\n\n  useEffect(() => {\n    const musicSuggestions = [\n      { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n      { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n      { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n      { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n      { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n      { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n    ];\n\n    const currentMusic = musicSuggestions.find(\n      (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n    );\n    setSelectedMusic(currentMusic);\n  }, [mood]);\n\n  const handleClear = () => {\n    if (activeInputMode === 'typing') {\n      setPrompt('');\n    } else if (activeInputMode === 'speech') {\n      setSpeechResult('');\n    }\n  };\n\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n        drawing: savedDrawing,\n        speechResult: speechResult,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n    setSavedDrawing(diaryEntries[date]?.drawing || null);\n    setSpeechResult(diaryEntries[date]?.speechResult || ''); \n  };\n\n  const handleEnter = () => {\n    if (activeInputMode === 'speech') {\n      if (isRecording) {\n        stopSpeechRecognition();\n        setDiaryEntries((prevEntries) => ({\n          ...prevEntries,\n          [selectedDate]: {\n            ...prevEntries[selectedDate],\n            speechResult: speechResult, // Save speech result for the selected date\n          },\n        }));\n        alert('Recording stopped and entry saved successfully!');\n      } else {\n        startSpeechRecognition();\n        alert('Recording started...');\n      }\n    } else{\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n        speechResult: speechResult,\n      },\n    }));\n    alert('Entry saved successfully!');\n    }\n  };\n\n  const handleInputModeChange = (mode) => {\n    setActiveInputMode(mode);\n    if (isRecording) stopSpeechRecognition();\n    setActiveInputMode(mode);\n    if (mode === 'speech') setIsLanguageModalOpen(true); \n\n    setActiveInputMode(mode);\n\n    if (mode === 'speech') {\n      //setIsSpeechOpen(true);\n      startSpeechRecognition();\n    } else {\n      stopSpeechRecognition();\n      //setIsSpeechOpen(false);\n    }\n\n    if (mode === 'draw') {\n      setIsDrawingModalOpen(true);\n    } else {\n      setIsDrawingModalOpen(false);\n    }\n  };\n\n  const clearResults = () => {\n    setPrompt('');\n    setSpeechResult('');\n  };\n\n  const startSpeechRecognition = (languageCode) => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = languageCode;\n    recognition.interimResults = false;\n    recognition.continuous = true;\n    recognitionRef.current = recognition;\n\n    let lastTranscript = \"\"; \n\n    recognition.onresult = (event) => {\n      let transcript = \"\";\n\n      for (let i = event.resultIndex; i < event.results.length; i++) {\n          const result = event.results[i];\n          if (result.isFinal) {  // Append only if the result is final\n              transcript += result[0].transcript.trim();\n          }\n      }\n\n      // Avoid duplicating words by comparing with the last appended text\n      if (transcript && transcript !== lastTranscript) {\n          setSpeechResult((prevResult) => prevResult + ' ' + transcript);\n          lastTranscript = transcript;  // Update last transcript to the new one\n      }\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.start();\n    setIsRecording(true);\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  const handleCanvasMouseDown = (e) => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.beginPath();\n      ctx.moveTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      isDrawing.current = true;\n    }\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      const rect = canvas.getBoundingClientRect();\n      const scaleX = canvas.width / rect.width;\n      const scaleY = canvas.height / rect.height;\n\n      ctx.lineTo(\n        (e.clientX - rect.left) * scaleX,\n        (e.clientY - rect.top) * scaleY\n      );\n      ctx.stroke();\n    }\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  const saveDrawing = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const dataUrl = canvas.toDataURL(); // Convert canvas to base64 image data\n      setSavedDrawing(dataUrl); // Store the image data for the selected date\n      setDiaryEntries((prevEntries) => ({\n        ...prevEntries,\n        [selectedDate]: {\n          ...prevEntries[selectedDate],\n          drawing: dataUrl,\n        },\n      }));\n      alert('Drawing saved successfully!');\n    }\n    //setIsDrawingOpen(false); // Close the drawing modal after saving\n  };\n\n  const handleReimagine = () => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      // Clear the entire canvas\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n    }\n  \n    // Reset the savedDrawing state to clear the drawing in the state\n    setSavedDrawing(null);\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        ...prevEntries[selectedDate],\n        drawing: null,\n      },\n    }));\n    alert('The drawing has been cleared for re-imagining!');\n  };\n  \n  const handleReviewMemories = () => {\n    const last14Days = dateList.slice(0, 14);\n    const happyDays = last14Days.filter(date => {\n      const entry = diaryEntries[date];\n      return entry && entry.mood >= 85; // Assuming 85-100 is happiness\n    });\n\n    if (happyDays.length > 0) {\n      setHappyMemories(happyDays);\n      setIsMemoryModalOpen(true);\n    }\n  };\n\n  useEffect(() => {\n    if (mood < 51) { // Assuming 0-50 is sadness or fear\n      handleReviewMemories();\n    }\n  }, [mood]);\n  \n  return (\n    <div className=\"app-layout\">\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard\n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`}\n            title=\"Type\"\n            onClick={() => handleInputModeChange('typing')}\n          />\n          <FaMicrophone\n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`}\n            title=\"Voice to Text\"\n            onClick={() => handleInputModeChange('speech')}\n          />\n          <FaPenFancy\n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`}\n            title=\"Draw\"\n            onClick={() => {\n              handleInputModeChange('draw');\n              setIsDrawingModalOpen(true);\n            }}\n          />\n        </div>\n        \n        {isLanguageModalOpen && (\n          <div className=\"language-modal\">\n            <h3>Choose Language for Speech-to-Text</h3>\n            <button onClick={() => handleLanguageSelect('en-US')}>English</button>\n            <button onClick={() => handleLanguageSelect('zh-TW')}>Taiwanese</button>\n          </div>\n        )}\n\n        {activeInputMode === 'typing' && (\n          <textarea\n            className=\"description-input\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            placeholder=\"Write your description here...\"\n          />\n        )}\n\n        {activeInputMode === 'speech' && (\n          <div className=\"speech-result\">\n            <h3>Speech-to-Text Result</h3>\n            <p>{speechResult}</p>\n          </div>\n        )}\n        <div className=\"button-container\">\n          <button className=\"button enter-button\" onClick={handleEnter}>\n            Enter\n          </button>\n\n          <button className=\"button clear-button\" onClick={handleClear}>\n              Clear\n          </button>\n        </div>\n        \n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-emojis\">\n            {moodEmojis.map((emoji, index) => (\n              <span key={index} className=\"mood-emoji\">\n                {emoji}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => handleMoodChange(Number(e.target.value))}\n          />\n        </div>\n\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist:</h3>\n            <a href={selectedMusic.playlistUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        <div className=\"mood-analysis\">\n          <h3>Past 14 Days Mood Analysis</h3>\n          <ul>\n            {Object.keys(moodAnalysis).map((mood, index) => (\n              <li key={mood}>\n                {moodLabels[index]} {moodEmojis[index]}: {moodAnalysis[mood]}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n      </div>\n\n      {/* Add DrawingModal here */}\n      <DrawingModal\n        isOpen={isDrawingModalOpen}\n        onClose={() => setIsDrawingModalOpen(false)}\n        canvasRef={canvasRef}\n        handleCanvasMouseDown={handleCanvasMouseDown}\n        handleCanvasMouseMove={handleCanvasMouseMove}\n        handleCanvasMouseUp={handleCanvasMouseUp}\n        saveDrawing={saveDrawing}\n        reimagineDrawing={handleReimagine}\n        savedDrawing={savedDrawing} // Pass the saved drawing to the modal\n      />\n\n      {isReviewModalOpen && (\n        <ReviewMemoriesModal\n          isOpen={isReviewModalOpen}\n          onClose={() => setIsReviewModalOpen(false)}\n          happyDays={happyDays}\n          onSelectDate={handleSelectDate}\n        />\n      )}\n    </div>\n\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}