{"version":3,"sources":["AlertModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","moodLabels","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","reduce","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","setMood","setImageUrl","moodAnalysis","setMoodAnalysis","initializeMoodAnalysis","activeInputMode","setActiveInputMode","isDrawingOpen","setIsDrawingOpen","selectedMusic","setSelectedMusic","isModalOpen","setIsModalOpen","lastModalShowDate","setLastModalShowDate","recognitionRef","useRef","canvasRef","isDrawing","acc","label","useEffect","updateMoodAnalysis","last14Days","slice","newMoodAnalysis","sadnessCount","fearCount","forEach","entry","moodIndex","Math","floor","moodLabel","daysSinceLastModal","currentMusic","moodRange","title","playlistUrl","find","music","handleInputModeChange","mode","startSpeechRecognition","stopSpeechRecognition","window","alert","recognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","prevPrompt","onerror","console","error","onend","log","start","current","stop","map","index","key","_diaryEntries$date","_diaryEntries$date2","_diaryEntries$date3","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","handleEnter","image","moodValue","min","imageCount","random","getRandomImageForMood","src","alt","type","max","Number","Object","keys","ref","onMouseDown","ctx","getContext","beginPath","moveTo","nativeEvent","offsetX","offsetY","onMouseMove","lineTo","stroke","onMouseUp","handleCanvasMouseUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f51fe204.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useState, useEffect, useRef } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa';\nimport './App.css';\nimport AlertModal from './AlertModal';\n\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\n\nconst imageDirectories = {\n  \"Anger\": \"images/Anger\",\n  \"Neutral\": \"images/Neutral\",\n  \"Fear\": \"images/Fear\",\n  \"Sadness\": \"images/Sadness\",\n  \"Surprise\": \"images/Surprise\",\n  \"Happiness\": \"images/Happiness\"\n};\n\nconst imageCounts = {\n  \"Anger\": 10,\n  \"Neutral\": 3,\n  \"Fear\": 8,\n  \"Sadness\": 20,\n  \"Surprise\": 8,\n  \"Happiness\": 11\n};\n\n// Function to get a random image for the current mood\nfunction getRandomImageForMood(moodValue) {\n  let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n  moodIndex = moodValue === 100 ? moodLabels.length - 1 : Math.min(moodIndex, moodLabels.length - 1);\n  \n  const moodLabel = moodLabels[moodIndex];\n  const directory = imageDirectories[moodLabel];\n  const imageCount = imageCounts[moodLabel] || 1;\n  const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n  return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Extract YouTube video ID from the URL\nfunction getYouTubeVideoId(url) {\n  const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#\\&\\?]*).*/;\n  const match = url.match(regExp);\n  return (match && match[1].length === 11) ? match[1] : null;\n}\n\nfunction App() {\n  const dateList = generateDateList();\n  const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n  const [selectedDate, setSelectedDate] = useState(dateList[0]);\n  const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n  const [mood, setMood] = useState(25);\n  const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n  const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n  const [activeInputMode, setActiveInputMode] = useState('typing');\n  const [isDrawingOpen, setIsDrawingOpen] = useState(false);\n  const [selectedMusic, setSelectedMusic] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [lastModalShowDate, setLastModalShowDate] = useState(null); // Track when the modal was last shown\n  const recognitionRef = useRef(null);\n  const canvasRef = useRef(null);\n  const isDrawing = useRef(false);\n\n  // Generate date list for the past 30 days\n  function generateDateList() {\n    const today = new Date();\n    const dateList = [];\n    for (let i = 0; i <= 30; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateString = date.toISOString().split('T')[0];\n      dateList.push(dateString);\n    }\n    return dateList;\n  }\n\n  // Initialize diary entries with default values\n  function initializeDiaryEntries(dateList) {\n    return dateList.reduce((entries, date) => {\n      entries[date] = { description: '', mood: 25, imageUrl: null };\n      return entries;\n    }, {});\n  }\n\n  // Initialize mood analysis with zero counts\n  function initializeMoodAnalysis() {\n    return moodLabels.reduce((acc, label) => {\n      acc[label] = 0;\n      return acc;\n    }, {});\n  }\n\n  // Update mood analysis based on the past 14 days\n  const updateMoodAnalysis = () => {\n    const last14Days = dateList.slice(0, 14);\n    const newMoodAnalysis = initializeMoodAnalysis();\n\n    let sadnessCount = 0;\n    let fearCount = 0;\n\n    last14Days.forEach((date) => {\n      const entry = diaryEntries[date];\n      if (entry && entry.mood !== null) {\n        const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n        const moodLabel = moodLabels[moodIndex];\n        if (moodLabel) {\n          newMoodAnalysis[moodLabel] += 1;\n\n          // Count the number of \"Sadness\" and \"Fear\" entries\n          if (moodLabel === \"Sadness\") {\n            sadnessCount += 1;\n          } else if (moodLabel === \"Fear\") {\n            fearCount += 1;\n          }\n        }\n      }\n    });\n\n    setMoodAnalysis(newMoodAnalysis);\n\n    // Check if modal should be shown again (only if the last modal show was more than 7 days ago)\n    const today = new Date();\n    const daysSinceLastModal = lastModalShowDate ? Math.floor((today - lastModalShowDate) / (1000 * 60 * 60 * 24)) : 8;\n\n    if ((sadnessCount > 7 || fearCount > 7) && daysSinceLastModal >= 7) {\n      setIsModalOpen(true);\n      setLastModalShowDate(new Date()); // Update last modal show date\n    }\n  };\n\n  // Call updateMoodAnalysis whenever diaryEntries change\n  useEffect(() => {\n    updateMoodAnalysis();\n  }, [diaryEntries]);\n\n  // Update YouTube music suggestion based on the mood\n  useEffect(() => {\n    const musicSuggestions = [\n      { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n      { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n      { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n      { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n      { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n      { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n    ];\n\n    const currentMusic = musicSuggestions.find(\n      (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n    );\n    setSelectedMusic(currentMusic);\n  }, [mood]);\n\n  // Handle switching between dates\n  const handleDateClick = (date) => {\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: imageUrl,\n      },\n    }));\n\n    setSelectedDate(date);\n    setPrompt(diaryEntries[date]?.description || '');\n    setMood(diaryEntries[date]?.mood || 25);\n    setImageUrl(diaryEntries[date]?.imageUrl || null);\n  };\n\n  // Handle saving the current entry\n  const handleEnter = () => {\n    const image = getRandomImageForMood(mood);\n    setImageUrl(image);\n\n    setDiaryEntries((prevEntries) => ({\n      ...prevEntries,\n      [selectedDate]: {\n        description: prompt,\n        mood: mood,\n        imageUrl: image,\n      },\n    }));\n\n    alert('Entry saved successfully!');\n  };\n\n  // Handle input mode change\n  const handleInputModeChange = (mode) => {\n    setActiveInputMode(mode);\n    if (mode === 'speech') {\n      startSpeechRecognition();\n    } else {\n      stopSpeechRecognition();\n    }\n    if (mode === 'draw') {\n      setIsDrawingOpen(true);\n    }\n  };\n\n  // Speech-to-text functionality\n  const startSpeechRecognition = () => {\n    if (!('webkitSpeechRecognition' in window)) {\n      alert('Speech recognition is not supported in this browser.');\n      return;\n    }\n\n    const recognition = new window.webkitSpeechRecognition();\n    recognition.lang = 'en-US';\n    recognition.interimResults = false;\n\n    recognition.onresult = (event) => {\n      const transcript = event.results[0][0].transcript;\n      setPrompt((prevPrompt) => prevPrompt + ' ' + transcript);\n    };\n\n    recognition.onerror = (event) => {\n      console.error('Speech recognition error:', event.error);\n    };\n\n    recognition.onend = () => {\n      console.log('Speech recognition ended.');\n    };\n\n    recognition.start();\n    recognitionRef.current = recognition;\n  };\n\n  const stopSpeechRecognition = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n    }\n  };\n\n  // Handle drawing functionality\n  const handleCanvasMouseDown = (e) => {\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    isDrawing.current = true;\n  };\n\n  const handleCanvasMouseMove = (e) => {\n    if (!isDrawing.current) return;\n    const ctx = canvasRef.current.getContext('2d');\n    ctx.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n    ctx.stroke();\n  };\n\n  const handleCanvasMouseUp = () => {\n    isDrawing.current = false;\n  };\n\n  return (\n    <div className=\"app-layout\">\n      {/* Sidebar for Diary Entries */}\n      <div className=\"sidebar\">\n        <h2 className=\"sidebar-title\">Diary AI</h2>\n        <ul className=\"diary-list\">\n          {dateList.map((date, index) => (\n            <li\n              key={date}\n              className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n              onClick={() => handleDateClick(date)}\n            >\n              {index === 0 ? 'Today' : date}\n            </li>\n          ))}\n        </ul>\n      </div>\n\n      {/* Main Content Area */}\n      <div className=\"main-content\">\n        <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n        <div className=\"input-icons\">\n          <FaKeyboard \n            className={`input-icon ${activeInputMode === 'typing' ? 'active' : ''}`} \n            title=\"Type\" \n            onClick={() => handleInputModeChange('typing')} \n          />\n          <FaMicrophone \n            className={`input-icon ${activeInputMode === 'speech' ? 'active' : ''}`} \n            title=\"Voice to Text\" \n            onClick={() => handleInputModeChange('speech')} \n          />\n          <FaPenFancy \n            className={`input-icon ${activeInputMode === 'draw' ? 'active' : ''}`} \n            title=\"Handwriting\" \n            onClick={() => handleInputModeChange('draw')} \n          />\n        </div>\n        <textarea\n          className=\"description-input\"\n          value={prompt}\n          onChange={(e) => setPrompt(e.target.value)}\n          placeholder=\"Write your description here...\"\n        />\n        <button \n          className=\"generate-button\"\n          onClick={handleEnter}\n        >\n          Enter\n        </button>\n\n        <div className=\"image-display\">\n          {imageUrl ? (\n            <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n          ) : (\n            <div className=\"placeholder\">Your image will appear here</div>\n          )}\n        </div>\n\n        <div className=\"mood-slider-container\">\n          <div className=\"mood-labels\">\n            {moodLabels.map((label) => (\n              <span key={label} className=\"mood-label\">\n                {label}\n              </span>\n            ))}\n          </div>\n          <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            value={mood}\n            className=\"mood-slider\"\n            onChange={(e) => setMood(Number(e.target.value))}\n          />\n        </div>\n\n        {/* YouTube Music Suggestions */}\n        {selectedMusic && (\n          <div className=\"music-suggestion\">\n            <h3>Suggested Playlist: {selectedMusic.title}</h3>\n            <a\n              href={selectedMusic.playlistUrl}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img\n                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                alt={`${selectedMusic.title} playlist`}\n                className=\"music-thumbnail\"\n              />\n            </a>\n          </div>\n        )}\n\n        {/* Mood Analysis Box */}\n        <div className=\"mood-analysis\">\n          <h3>Past 14 Days Mood Analysis</h3>\n          <ul>\n            {Object.keys(moodAnalysis).map((mood) => (\n              <li key={mood}>\n                {mood}: {moodAnalysis[mood]}\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        {/* Alert Modal for Help */}\n        <AlertModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n          link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n        />\n\n        {/* Drawing Overlay */}\n        {isDrawingOpen && (\n          <div className=\"drawing-overlay\">\n            <canvas\n              ref={canvasRef}\n              className=\"drawing-canvas\"\n              onMouseDown={handleCanvasMouseDown}\n              onMouseMove={handleCanvasMouseMove}\n              onMouseUp={handleCanvasMouseUp}\n            />\n            <button className=\"close-drawing\" onClick={() => setIsDrawingOpen(false)}>Done</button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}