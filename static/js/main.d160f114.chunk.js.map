{"version":3,"sources":["AlertModal.js","App.js","reportWebVitals.js","index.js"],"names":["AlertModal","_ref","isOpen","onClose","message","link","React","createElement","className","href","target","rel","onClick","moodLabels","imageDirectories","imageCounts","getYouTubeVideoId","url","match","length","App","dateList","today","Date","i","date","setDate","getDate","dateString","toISOString","split","push","generateDateList","diaryEntries","setDiaryEntries","useState","reduce","entries","description","mood","imageUrl","initializeDiaryEntries","selectedDate","setSelectedDate","prompt","setPrompt","setMood","setImageUrl","selectedMusic","setSelectedMusic","moodAnalysis","setMoodAnalysis","initializeMoodAnalysis","isModalOpen","setIsModalOpen","acc","label","useEffect","updateMoodAnalysis","last14Days","slice","newMoodAnalysis","forEach","entry","moodIndex","Math","floor","moodLabel","currentMusic","moodRange","title","playlistUrl","find","music","map","index","key","prevEntries","handleDateClick","FaKeyboard","FaMicrophone","FaPenFancy","value","onChange","e","placeholder","name","handleEnter","image","moodValue","imageCount","random","getRandomImageForMood","alert","src","alt","type","min","max","Object","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d160f114.chunk.js","sourcesContent":["import React from 'react';\nimport './AlertModal.css';\n\nfunction AlertModal({ isOpen, onClose, message, link }) {\n    if (!isOpen) return null;\n\n    return (\n        <div className=\"modal-overlay\">\n            <div className=\"modal-content\">\n                <h2 className=\"modal-title\">Time to Get Some Help!</h2>\n                <p className=\"modal-message\">{message}</p>\n                <a href={link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"modal-link\">\n                    Visit a Psychiatrist\n                </a>\n                <button className=\"modal-close-button\" onClick={onClose}>\n                    Close\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default AlertModal;\n\n","import React, { useState, useEffect } from 'react';\nimport { FaKeyboard, FaMicrophone, FaPenFancy } from 'react-icons/fa'; // Import icons\nimport './App.css';\nimport AlertModal from './AlertModal';\n\n// Updated mood labels (including \"Neutral\")\nconst moodLabels = [\"Anger\", \"Neutral\", \"Fear\", \"Sadness\", \"Surprise\", \"Happiness\"];\n\n// Image directories and count of images for different moods (public directory)\nconst imageDirectories = {\n    \"Anger\": \"images/Anger\",\n    \"Neutral\": \"images/Neutral\",\n    \"Fear\": \"images/Fear\",\n    \"Sadness\": \"images/Sadness\",\n    \"Surprise\": \"images/Surprise\",\n    \"Happiness\": \"images/Happiness\"\n};\n\n// Image count for each mood folder\nconst imageCounts = {\n    \"Anger\": 10,\n    \"Neutral\": 3,\n    \"Fear\": 8,\n    \"Sadness\": 20,\n    \"Surprise\": 8,\n    \"Happiness\": 11\n};\n\n// Get a random image for the current mood\nfunction getRandomImageForMood(moodValue) {\n    // Calculate the mood index and ensure it's within the correct range\n    let moodIndex = Math.floor((moodValue / 100) * moodLabels.length);\n\n    // If moodValue is 100, set the index to the last mood\n    if (moodValue === 100) {\n        moodIndex = moodLabels.length - 1;\n    } else if (moodIndex >= moodLabels.length) {\n        // Just in case, ensure the index doesn't go out of bounds\n        moodIndex = moodLabels.length - 1;\n    }\n\n    const moodLabel = moodLabels[moodIndex];\n    const directory = imageDirectories[moodLabel];\n\n    // Get the number of images in each mood's folder from the imageCounts object\n    const imageCount = imageCounts[moodLabel] || 1; // Fallback to 1 if undefined\n    const randomIndex = Math.floor(Math.random() * imageCount) + 1;\n\n    return `${process.env.PUBLIC_URL}/${directory}/image${randomIndex}.jpg`;\n}\n\n// Extract YouTube video ID from the URL\nfunction getYouTubeVideoId(url) {\n    const regExp = /^.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#\\&\\?]*).*/;\n    const match = url.match(regExp);\n    return (match && match[1].length === 11) ? match[1] : null;\n}\n\nfunction App() {\n    const dateList = generateDateList();\n    const [diaryEntries, setDiaryEntries] = useState(initializeDiaryEntries(dateList));\n    const [selectedDate, setSelectedDate] = useState(dateList[0]);\n    const [prompt, setPrompt] = useState(diaryEntries[dateList[0]].description);\n    const [mood, setMood] = useState(25);  // Set initial mood to Neutral\n    const [imageUrl, setImageUrl] = useState(diaryEntries[dateList[0]].imageUrl);\n    const [selectedMusic, setSelectedMusic] = useState(null);\n    const [moodAnalysis, setMoodAnalysis] = useState(initializeMoodAnalysis());\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    // Generate dates from today and the past 30 days\n    function generateDateList() {\n        const today = new Date();\n        const dateList = [];\n\n        for (let i = 0; i <= 30; i++) {\n            const date = new Date(today);\n            date.setDate(today.getDate() - i);\n            const dateString = date.toISOString().split('T')[0];\n            dateList.push(dateString);\n        }\n\n        return dateList;\n    }\n\n    // Initialize diary entries with generated dates\n    function initializeDiaryEntries(dateList) {\n        return dateList.reduce((entries, date) => {\n            entries[date] = { description: '', mood: 25, imageUrl: null };\n            return entries;\n        }, {});\n    }\n\n    // Initialize mood analysis count\n    function initializeMoodAnalysis() {\n        return moodLabels.reduce((acc, label) => {\n            acc[label] = 0;\n            return acc;\n        }, {});\n    }\n\n    // Update mood analysis based on the last 14 days' entries\n    useEffect(() => {\n        const updateMoodAnalysis = () => {\n            const last14Days = dateList.slice(0, 14); // Last two weeks\n            const newMoodAnalysis = initializeMoodAnalysis();\n\n            last14Days.forEach((date) => {\n                const entry = diaryEntries[date];\n                if (entry) {\n                    const moodIndex = Math.floor(entry.mood / (100 / moodLabels.length));\n                    const moodLabel = moodLabels[moodIndex];\n                    newMoodAnalysis[moodLabel]++;\n                }\n            });\n\n            setMoodAnalysis(newMoodAnalysis);\n\n            // Check if \"Fear\" or \"Sadness\" exceeds 7 days\n            if (newMoodAnalysis[\"Fear\"] > 7 || newMoodAnalysis[\"Sadness\"] > 7) {\n                setIsModalOpen(true);\n            }\n        };\n\n        updateMoodAnalysis();\n    // Only re-run if diaryEntries change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [diaryEntries]);\n\n    // Get music suggestion based on mood\n    useEffect(() => {\n        const musicSuggestions = [\n            { moodRange: [0, 16], title: \"Angry Music\", playlistUrl: \"https://www.youtube.com/watch?v=r8OipmKFDeM\" },\n            { moodRange: [17, 33], title: \"Neutral Music\", playlistUrl: \"https://www.youtube.com/watch?v=CFGLoQIhmow&t=2486s\" },\n            { moodRange: [34, 50], title: \"Fear Music\", playlistUrl: \"https://www.youtube.com/watch?v=P_tsPLT0irs\" },\n            { moodRange: [51, 67], title: \"Sad Music\", playlistUrl: \"https://www.youtube.com/watch?v=A_MjCqQoLLA\" },\n            { moodRange: [68, 84], title: \"Surprise Music\", playlistUrl: \"https://www.youtube.com/watch?v=HQmmM_qwG4k&t=2s\" },\n            { moodRange: [85, 100], title: \"Happy Music\", playlistUrl: \"https://www.youtube.com/watch?v=ZbZSe6N_BXs\" },\n        ];\n\n        const currentMusic = musicSuggestions.find(\n            (music) => mood >= music.moodRange[0] && mood <= music.moodRange[1]\n        );\n        setSelectedMusic(currentMusic);\n    }, [mood]);\n\n    // Handle \"Enter\" action\n    const handleEnter = () => {\n        const image = getRandomImageForMood(mood);\n        setImageUrl(image);\n\n        // Save current diary entry\n        setDiaryEntries((prevEntries) => ({\n            ...prevEntries,\n            [selectedDate]: {\n                description: prompt,\n                mood: mood,\n                imageUrl: image,\n            },\n        }));\n        alert('Entry saved successfully!');\n    };\n\n    // Handle switching between dates\n    const handleDateClick = (date) => {\n        // Save current data before switching\n        setDiaryEntries((prevEntries) => ({\n            ...prevEntries,\n            [selectedDate]: {\n                description: prompt,\n                mood: mood,\n                imageUrl: imageUrl,\n            },\n        }));\n\n        // Set new date data\n        setSelectedDate(date);\n        setPrompt(diaryEntries[date].description);\n        setMood(diaryEntries[date].mood);\n        setImageUrl(diaryEntries[date].imageUrl);\n    };\n\n    return (\n        <div className=\"app-layout\">\n            {/* Sidebar for Diary Entries */}\n            <div className=\"sidebar\">\n                <h2 className=\"sidebar-title\">Diary AI</h2>\n                <ul className=\"diary-list\">\n                    {dateList.map((date, index) => (\n                        <li\n                            key={date}\n                            className={`diary-item ${date === selectedDate ? 'active' : ''}`}\n                            onClick={() => handleDateClick(date)}\n                        >\n                            {index === 0 ? 'Today' : date}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n\n            {/* Main Content Area */}\n            <div className=\"main-content\">\n                <h1 className=\"main-title\">{selectedDate}'s Mood</h1>\n                <div className=\"input-icons\">\n                    <FaKeyboard className=\"input-icon\" title=\"Type\" />\n                    <FaMicrophone className=\"input-icon\" title=\"Voice to Text\" />\n                    <FaPenFancy className=\"input-icon\" title=\"Handwriting\" />\n                </div>\n                <textarea\n                    className=\"description-input\"\n                    value={prompt}\n                    onChange={(e) => setPrompt(e.target.value)}\n                    placeholder=\"Write your description here...\"\n                    name=\"description\"\n                />\n                <button \n                    className=\"generate-button\" \n                    name=\"generate-button\"\n                    onClick={handleEnter}\n                >\n                    Enter\n                </button>\n\n                {/* Image Container */}\n                <div className=\"image-display\">\n                    {imageUrl ? (\n                        <img src={imageUrl} alt=\"Mood\" className=\"generated-image\" />\n                    ) : (\n                        <div className=\"placeholder\">Your image will appear here</div>\n                    )}\n                </div>\n\n                {/* Mood Slider with Emotion Labels */}\n                <div className=\"mood-slider-container\">\n                    <div className=\"mood-labels\">\n                        {moodLabels.map((label, index) => (\n                            <span key={index} className=\"mood-label\">\n                                {label}\n                            </span>\n                        ))}\n                    </div>\n                    <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"100\"\n                        value={mood}\n                        className=\"mood-slider\"\n                        onChange={(e) => setMood(e.target.value)}\n                    />\n                </div>\n\n               {/* YouTube Music Link and Thumbnail */}\n               {selectedMusic && (\n                    <div className=\"music-suggestion\">\n                        <h3>Suggested Playlist: {selectedMusic.title}</h3>\n                        <a\n                            href={selectedMusic.playlistUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                        >\n                            <img\n                                src={`https://img.youtube.com/vi/${getYouTubeVideoId(selectedMusic.playlistUrl)}/hqdefault.jpg`}\n                                alt={`${selectedMusic.title} playlist`}\n                                className=\"music-thumbnail\"\n                            />\n                        </a>\n                    </div>\n                )}\n\n                {/* Mood Analysis Box */}\n                <div className=\"mood-analysis\">\n                    <h3>Past 14 Days Mood Analysis</h3>\n                    <ul>\n                        {Object.keys(moodAnalysis).map((mood) => (\n                            <li key={mood}>\n                                {mood}: {moodAnalysis[mood]}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n\n                {/* Alert Modal for Help */}\n                <AlertModal\n                    isOpen={isModalOpen}\n                    onClose={() => setIsModalOpen(false)}\n                    message=\"It seems that you've been feeling fear or sadness for more than 7 days in the past two weeks. Consider talking to a psychiatrist.\"\n                    link=\"https://www.google.com/search?q=%E5%BF%83%E7%90%86%E9%86%AB%E7%94%9F\"\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals();\n\n"],"sourceRoot":""}